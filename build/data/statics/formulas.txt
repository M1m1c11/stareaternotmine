{ Subformulas
	scoreMiners # case(poor, rich âˆ¨ richCore) [0.2, 0.8, 0.4];
	scoreFoodPop # 0.1 + (1 - 0.1 * (3 + if(fertile, 4, 0)) * if(toxic, 0.5, 1)) / 1.5 / if(toxic, 0.75, 1);
	
	bestScore # size * 5 * (1 - scoreFoodPop) * scoreMiners;
	startScore # size * (
		5 * (1 - scoreFoodPop) * scoreMiners
		- max(0, case(irradiated1, irradiated2, irradiated3) [1, 2, 4, 0] - case(magnetosphere1, magnetosphere2) [1, 2, 0])
		- case(noAtmo, denseAtmo) [0.5, 2, 0] - case(noGrav, lowGrav, highGrav) [0.5, 0.25, 1, 0]
		- if(toxic, 1, 0) - if(radioactive, 2, 0) - case(cold, hot) [1, 2, 0]
	);
	
	traitUndesirability # 
		max(0, case(irradiated1, irradiated2, irradiated3) [1, 2, 4, 0] - case(magnetosphere1, magnetosphere2) [1, 2, 0]) +
		case(noAtmo, denseAtmo) [0.5, 2, 0] +
		case(noGrav, lowGrav, highGrav) [0.5, 0.25, 1, 0] +
		if(toxic, 1, 0) + if(radioactive, 2, 0) + case(cold, hot) [1, 2, 0];
}

{ ColonyFormulas
	colonizationPopThreshold # 10e3;
	uncolonizedMaxPopulation # 1e9 * size / 10;
	maxPopulation # 1e9 * size / 10;
	victoryPointWorth # 1e-6 * pop * 0.98 ^ turn;
	farmFields # 0.1 * 2 ^ (subterrainLvl / 5) * size / 10 * 1e9;
	spaceliftFactor # 1 / limit(
			(case(noGrav, lowGrav, highGrav) [0, 2, 10, 5] - 2 * rocketryLvl / 5) * case(noAtmo, denseAtmo) [1, 3, 2],
		1, 20);
	fuel # 500 * size * limit(infra_count / pop, 0, 1) * limit(pop / maxPop, 0, 1);
	fuelCost # 1e5;
	maintenanceLimit # 0.8;
	
	populationGrowth 
	{ Stat
		base # pop * 0.04 * (
				(1 + 0.5 * childCareLvl / 5) * 
				if(noGrav, 0.8 ^ (1 - microgravTolLvl / 5), 1)
			);
		total # base;
	}
	
	minerals # case(poor, rich) [0.2, 0.8, 0.4];
	emigrants # pop * 0.001;
	environment # if(noGrav, 0.8 ^ (1 - microgravTolLvl / 5), 1);
	desirability # (1 - pop / maxPop) / (1 + traitUndesirability / 5);
	organization # limit(infra_count / pop, 0, 1);
	
	farming
	{ Work
		improvised	# (3 + if(fertile, 4, 0)) * if(toxic, 0.5, 1);
		organized	# (4 + if(fertile, 4, 0) +  2 * gmoFoodLvl / 5) * if(toxic, 0.5, 1);
		orgFactor # 0.5 + 0.5 * farmLawsLvl / 5;
	}
	gardening
	{ Work
		improvised	# 1.5 * if(toxic, 0.75, 1);
		organized	# (1.5 + 1 * (hydroFarmLvl / 5) +  0.5 * (gmoFoodLvl / 5)) * if(toxic, 0.75, 1);
		orgFactor # 0.5 + 0.5 * farmLawsLvl / 5;
	}
	industry
	{ Work
		improvised	# 2;
		organized	# 5 + 2 * recycleLvl / 5 + 3 * roboLvl / 5;
		orgFactor # 0.5 + 0.5 * indLawsLvl / 5;
	}
	development 
	{ Work
		improvised	# 2 + 0.5 * compSciLvl / 5 + 0.5 * qCompLvl / 5;
		organized	# 5 + 1 * recycleLvl / 5 + 2.5 * compSciLvl / 5 + 2.5 * qCompLvl / 5;
		orgFactor # 0.5 + 0.5 * schoolLawsLvl / 5;
	}
	
	repair # (0.2 + 0.3 * serviceToolsLvl / 5) * min(infra_count, pop);
	popHp # 1e-5;
}

{ ExtraColonyFormulas
	devIndex # pop + 3 * infra_count;
	minDevIndex # 10e3;
	maxDevIndex # maxPop * (1 + 3 * 0.5 ^ (1 - heavyIndLvl / 5));
}

{ PlanetFormulas
	type: asteriod
	baseTraits [ :noAtmo :noGrav ]
	bestTraits [ :fertile :rich ]
	worstTraits [ :toxic :poor :radioactive ]
	unchangeableTraits [ :poor :rich :richCore ]
	
	bestScore # bestScore;
	startScore # startScore;
}

{ PlanetFormulas
	type: gasGiant
	baseTraits []
	bestTraits [ :fertile :rich :magnetosphere2 ]
	worstTraits [ :denseAtmo :highGrav :toxic :poor :radioactive ]
	unchangeableTraits [ :poor :rich :richCore ]
	
	bestScore # bestScore;
	startScore # startScore;
}

{ PlanetFormulas
	type: rock
	baseTraits []
	bestTraits [ :fertile :rich :magnetosphere2 ]
	worstTraits [ :denseAtmo :highGrav :toxic :poor :radioactive ]
	unchangeableTraits [ :poor :rich :richCore ]
	
	bestScore # bestScore;
	startScore # startScore;
}

{ PlayerFormulas
	focusedResearchWeight # 4;
}

{ ShipFormulas
	evasion # baseEvasion + 2 * extraThrusters - max(hullInertia - 2 * antiInertia, 0);
	hitPoints # hullHp * armorFactor * (1 + 0.5 * heavyArmor) / (1 + 0.5 * cargo);
	
	combatSpeed # thrust + 0.05 * extraThrusters;
	
	detection # hullSensor + sensor;
	cloaking # hullCloak + shieldCloak;
	jamming # hullJamming + shieldJamming;
	
	scanRange # 0.5;
	
	carryCapacity # hangar * 10;
	towCapacity # towCabel * 10;
	colonyPop # 500 * colony * (1 + 0.1 * colony_lvl ^ 2);
	colonyBuildings { Buildings
		Infra # 500 * colony * (1 + 0.1 * colony_lvl ^ 2);
	}
	
	naturalCloakBonus # 5;
	sensorRangePenalty # -2;
	
	reactorSize # hullReactor * (1 + 0.5 * extraReactor);
	shieldSize # hullShield;
	
	repairCostFactor # 0.2;
	levelRefitCost # 0.2 ^ (1 - limit(lvl, 0, 5) / 5);
	armorCostPortion # 0.4;
	reactorCostPortion # 0.2;
	sensorCostPortion # 0.1;
	thrustersCostPortion # 0.2;

	fuelUsage # 2 ^ (max(dist, 1) - 1);	
	galaxySpeed # baseSpeed * size / (size + towSize) + if(lane, 0.5, 0);
}

{ StarFormulas
	scanRange # 2;
}

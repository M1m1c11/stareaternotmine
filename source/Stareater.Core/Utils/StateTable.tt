<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Collections.Generic" #>
<#+
private string modifer = "";
private List<string> usings = new List<string>();
private List<string> genericTypes = new List<string>();

private string superClass = null;
private string superConstructor = null;

private bool CopyNeedsPlayerRemap = false;
private bool CopyNeedsGalaxyRemap = false;
private bool CopyConstructorCallNormalConstructor = true;
private bool SuperClassHasCopyConstructor = false;

enum Flags
{
	None = 0,
	UseDefaultConstructor = 1,
}

class DataInfo
{
	public string Name;
	public string Type;

	public string CopyFromGalaxyRemap;
	public string CopyFromPlayersRemap;
	
	public string BaseFieldInitCode = null;
	public string BaseFieldReadCode = null;
	public string CopyLogic;
	public string DefaultConstructorCall;
	public string DerivedLogic = null;
	public string[] DerivedParams = null;
	public string SetModifer = "private";
	
	public bool BaseField = false;
	public bool CopyConstructorOnly = false;
	public bool CopyMethodNeedGalaxyRemap = false;
	public bool CopyMethodNeedPlayersRemap = false;
	public bool IsPrivate = false;
	public bool HasCopyMethod = false;

	public DataInfo(string name, string type) {
		this.Name = name;
		this.Type = type;
		
		this.CopyLogic = "this." + name + " = original." + name + ";";
		this.CopyFromGalaxyRemap = initGalaxyRemapCode("this." + name, type);
		this.CopyFromPlayersRemap = initPlayerRemapCode("this." + name, type);
		this.DefaultConstructorCall = "new " + type + "()";
	}
	
	private static string initGalaxyRemapCode(string readCode, string type)
	{
		if (type == "StarData")
			return "galaxyRemap.Stars[" + readCode + "]";
		else if (type == "Planet")
			return "galaxyRemap.Planets[" + readCode + "]";
		return null;
	}
	
	private static string initPlayerRemapCode(string readCode, string type)
	{
		if (type == "Player")
			return "playersRemap.Players[" + readCode + "]";
		else if (type == "Colony")
			return "playersRemap.Colonies[" + readCode + "]";
		else if (type == "StellarisAdmin")
			return "playersRemap.Stellarises[" + readCode + "]";
		else if (type == "Design")
			return "playersRemap.Designs[" + readCode + "]";
		else if (type == "IdleFleet")
			return "playersRemap.IdleFleets[" + readCode + "]";
		return null;
	}
	
	public DataInfo Constructor(string code)
	{	
		this.DefaultConstructorCall = code;
		return this;
	}
	
	public DataInfo Base()
	{
		this.BaseField = true;
		return this;
	}
	
	public DataInfo Base(string initCode, string readCode)
	{
		this.BaseField = true;
		this.BaseFieldInitCode = initCode;
		this.BaseFieldReadCode = readCode;
		
		this.CopyFromGalaxyRemap = initGalaxyRemapCode(readCode, this.Type);
		this.CopyFromPlayersRemap = initPlayerRemapCode(readCode, this.Type);
		return this;
	}
	
	public DataInfo CopyOnly()
	{
		this.CopyConstructorOnly = true;
		return this;
	}
	
	public DataInfo CopyCode(string code)
	{
		this.CopyLogic = code;
		return this;
	}
	
	public DataInfo CopyRecursive(bool needGalaxyRemap, bool needPlayerRemap)
	{
		this.HasCopyMethod = true;
		this.CopyMethodNeedGalaxyRemap = needGalaxyRemap;
		this.CopyMethodNeedPlayersRemap = needPlayerRemap;
		return this;
	}
	
	public DataInfo Derived(string code)
	{
		this.DerivedLogic = code;
		return this;
	}
	
	public DataInfo Derived(string code, params string[] extraConstructorParams)
	{
		this.DerivedLogic = code;
		this.DerivedParams = extraConstructorParams;
		return this;
	}
	
	public DataInfo Private()
	{
		IsPrivate = true;
		return this;
	}
	
	public DataInfo PublicSet()
	{
		this.SetModifer = "";
		return this;
	}
}

class FirstCase
{
	private string firstCase;
	private string otherCases;
	private bool first = true;
	
	public FirstCase(string firstCase, string otherCases)
	{
		this.firstCase = firstCase;
		this.otherCases = otherCases;
	}
	
	public string Get
	{
		get
		{
			string result = first ? firstCase : otherCases;
			first = false;
			
			return result;
		}
	}
}

private string paramName(string fieldName)
{
	if (fieldName.Length > 1) 
		return fieldName.Substring(0, 1).ToLower() + fieldName.Substring(1);
		
	return fieldName.ToLower();
}

private void WriteUsings()
{
	foreach(string usingName in usings)
		WriteLine("using " + usingName + ";");
}
private void WriteClassDefinition(string className)
{
	if (!string.IsNullOrWhiteSpace(modifer))
		Write(modifer.Trim() + " ");
		
	Write("class " + className);
	
	if (genericTypes.Count > 0)
	{
		Write("<");
	
		var commaOrNot = new FirstCase("", ", ");
		for(int i = 0; i < genericTypes.Count; i++) {
			Write(commaOrNot.Get + genericTypes[i]);
		}
		
		Write(">");
	}
	
	if (!string.IsNullOrWhiteSpace(superClass))
		Write(" : " + superClass);
}

private void WriteFields(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "		");
	foreach(var field in dataInfos)
	{
		if (field.BaseField)
			continue;
		
		if (field.IsPrivate)
			WriteLine(indent.Get + "private "  + field.Type + " " + paramName(field.Name) + ";");
		else
			WriteLine(indent.Get + "public "  + field.Type + " " + field.Name + " { get; " + field.SetModifer +" set; }");
	}
}

private void WriteContructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	var commaOrNot = new FirstCase("", ", ");
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].DerivedParams != null)
			foreach(var extraParam in dataInfos[i].DerivedParams)
				Write(commaOrNot.Get + extraParam);
			
		if (dataInfos[i].CopyConstructorOnly || dataInfos[i].DerivedLogic != null)
			continue;
			
		Write(commaOrNot.Get + dataInfos[i].Type + " " + paramName(dataInfos[i].Name));
	}
	
	Write(")");
	
	if (superConstructor != null)
		Write(" : " + superConstructor);
	else if (dataInfos.Any(x => x.BaseField))
	{
		Write(" : base(");
		commaOrNot = new FirstCase("", ", ");
		
		for(int i = 0; i < dataInfos.Length; i++) {
			if (!dataInfos[i].BaseField)
				continue;
			
			if (dataInfos[i].BaseFieldInitCode == null)
				Write(commaOrNot.Get + paramName(dataInfos[i].Name));
			else
				Write(commaOrNot.Get + dataInfos[i].BaseFieldInitCode);
		}
		Write(")");
	}
}

private void WriteFieldInits(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	foreach(var field in dataInfos) 
	{
		if (field.CopyConstructorOnly || field.BaseField)
			continue;

		if (field.DerivedLogic != null)
			WriteLine(indent.Get + field.DerivedLogic);
		else if (field.IsPrivate)
			WriteLine(indent.Get + "this."  + paramName(field.Name) + " = " + paramName(field.Name) + ";");
		else
			WriteLine(indent.Get + "this."  + field.Name + " = " + paramName(field.Name) + ";");
	}
	
	foreach(var field in dataInfos) 
	{
		if (!field.CopyConstructorOnly)
			continue;
			
		if (field.IsPrivate)
			WriteLine(indent.Get + "this."  + paramName(field.Name) + " = " + field.DefaultConstructorCall + ";");
		else
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.DefaultConstructorCall + ";");
	}
}

private void WriteCopyConstructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(" + className + " original");
	
	if (CopyNeedsPlayerRemap)
		Write(", PlayersRemap playersRemap");
	
	if (CopyNeedsGalaxyRemap)
		Write(", GalaxyRemap galaxyRemap");
	
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly || dataInfos[i].DerivedLogic != null)
			continue;
		Write(", " + dataInfos[i].Type + " " + paramName(dataInfos[i].Name));
	}
	
	Write(")");
	
	if (SuperClassHasCopyConstructor)
		CallBaseCopyConstructor(dataInfos);
	else if (CopyConstructorCallNormalConstructor)
		CallNormalConstructor(dataInfos);
		
}

private void CallNormalConstructor(params DataInfo[] dataInfos)
{
	Write(" : this(");
	
	var commaOrNot = new FirstCase("", ", ");
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
			
		Write(commaOrNot.Get + paramName(dataInfos[i].Name));
	}
	
	Write(")");
}

private void CallBaseCopyConstructor(params DataInfo[] dataInfos)
{
	Write(" : base(original");
	
	for(int i = 0; i < dataInfos.Length; i++) {
		if (!dataInfos[i].BaseField)
			continue;
			
		if (dataInfos[i].BaseFieldInitCode == null)
			Write(", " + paramName(dataInfos[i].Name));
		else
			Write(", " + dataInfos[i].BaseFieldInitCode);
	}
	
	Write(")");
}

private void WriteFieldCopys(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	foreach(var field in dataInfos) 
	{
		if (field.HasCopyMethod)
		{
			var commaOrNot = new FirstCase("", ", ");
			Write(indent.Get + "this."  + field.Name + " = original." + field.Name + ".Copy(");
			
			if (field.CopyMethodNeedGalaxyRemap)
				Write(commaOrNot.Get + "galaxyRemap");
			if (field.CopyMethodNeedPlayersRemap)
				Write(commaOrNot.Get + "playersRemap");
				
			WriteLine(");");
		}
		else if (field.CopyLogic == null && field.CopyConstructorOnly)
			WriteLine(indent.Get + "this."  + field.Name + " = original." + field.Name);
		else if (field.CopyLogic != null)
			WriteLine(indent.Get + field.CopyLogic);
	}
}

private void WriteCopyMethod(string className, params DataInfo[] dataInfos)
{
	if (modifer.Contains("abstract"))
		return;
		
	WriteLine("internal " + className + " Copy(" + copyParams(dataInfos) + ")");
	WriteLine("		{");
	Write("			return new " + className + "(");
	
	var commaOrNot = new FirstCase("", ", ");
	if (dataInfos.Any(x => x.CopyConstructorOnly || x.CopyLogic != null) || SuperClassHasCopyConstructor)
		Write(commaOrNot.Get + "this");
	
	if (CopyNeedsPlayerRemap)
		Write(commaOrNot.Get + "playersRemap");
	
	if (CopyNeedsGalaxyRemap)
		Write(commaOrNot.Get + "galaxyRemap");
		
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly || dataInfos[i].DerivedLogic != null)
			continue;
			
		Write(commaOrNot.Get);
		
		if (dataInfos[i].CopyFromGalaxyRemap != null)
			Write(dataInfos[i].CopyFromGalaxyRemap);
		else if (dataInfos[i].CopyFromPlayersRemap != null)
			Write(dataInfos[i].CopyFromPlayersRemap);
		else
			Write("this." + dataInfos[i].Name);
	}
	
	WriteLine(");");
	WriteLine("		}");
}

private string copyParams(params DataInfo[] dataInfos)
{
	StringBuilder sb = new StringBuilder();
	var commaOrNot = new FirstCase("", ", ");
	
	if (dataInfos.Any(x => x.CopyFromPlayersRemap != null) || CopyNeedsPlayerRemap)
		sb.Append(commaOrNot.Get + "PlayersRemap playersRemap");
	
	if (dataInfos.Any(x => x.CopyFromGalaxyRemap != null) || CopyNeedsGalaxyRemap)
		sb.Append(commaOrNot.Get + "GalaxyRemap galaxyRemap");
	
	return sb.ToString();
}

private void Begin(string namespaceName, string className, params DataInfo[] dataInfos)
{
	WriteUsings(); #>

namespace <#+ Write(namespaceName); #> 
{
	<#+ WriteClassDefinition(className); #> 
	{
		<#+ WriteFields(dataInfos); #>

		public <#+ WriteContructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldInits(dataInfos); #> 
		} 

<#+ if (dataInfos.Any(x => x.CopyConstructorOnly || x.CopyLogic != null) || SuperClassHasCopyConstructor) { #>
		private <#+ WriteCopyConstructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldCopys(dataInfos); #> 
		}
<#+ } #>

		<#+ WriteCopyMethod(className, dataInfos); #> 
<#+
}

private void End()
{
	WriteLine("	}");
	WriteLine("}");
}

private void Generate(string namespaceName, string className, params DataInfo[] dataInfos)
{
	Begin(namespaceName, className, dataInfos);
	End();
}
#>
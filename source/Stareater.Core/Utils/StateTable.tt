<#@ include file="$(ProjectDir)/Utils/StateTableField.tt" #>

<#+
private string modifer = "";
private List<string> usings = new List<string>(new string[] { "Ikadn.Ikon.Types", "Stareater.Utils.Collections" });
private List<string> genericTypes = new List<string>();

private string SuperClass = null;
private string TableTag = null;

private bool initWithDefaultConstructor = false;

private bool SuperClassHasCopyConstructor = false;

private bool LoadNeedsObjectDeindexer = true;
private bool SaveNeedsObjectIndexer = true;

private void WriteUsings()
{
	foreach(string usingName in usings)
		WriteLine("using " + usingName + ";");
}

private void WriteClassDefinition(string className)
{
	if (!string.IsNullOrWhiteSpace(modifer))
		Write(modifer.Trim() + " ");
		
	Write("class " + className);
	
	if (genericTypes.Count > 0)
	{
		Write("<");
	
		var commaOrNot = new FirstCase("", ", ");
		for(int i = 0; i < genericTypes.Count; i++) {
			Write(commaOrNot.Get + genericTypes[i]);
		}
		
		Write(">");
	}
	
	if (!string.IsNullOrWhiteSpace(SuperClass))
		Write(" : " + SuperClass);
}

private void WriteFields(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "		");
	foreach(var field in dataInfos)
	{
		if (field.BaseInit)
			continue;
		
		if (!field.PublicGet && !field.PublicSet)
			WriteLine(indent.Get + "private " + field.Type + " " + field.Name + ";");
		else
		{
			string getMod = field.PublicGet ? "" : "private ";
			string setMod = field.PublicSet ? "" : "private ";
			WriteLine(indent.Get + "public " + field.Type + " " + field.Name + " { " + getMod + "get; " + setMod + "set; }");
		}
	}
}

private void WriteContructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	var commaOrNot = new FirstCase("", ", ");
	foreach(var field in dataInfos) 
	{
		if (field.InitParams == null)
			Write(commaOrNot.Get + field.Type + " " + field.LowerName);
		else
			for(int i = 0; i < field.InitParams.Length; i += 2)
				Write(commaOrNot.Get + field.InitParams[i] + " " + field.InitParams[i + 1]);
	}
	
	Write(")");
	
	if (dataInfos.Any(x => x.InitPassLogic != null) || initWithDefaultConstructor)
	{
		commaOrNot = new FirstCase("", ", ");
		if (dataInfos.Any(x => x.BaseInit))
			Write(" : base(");
		else
			Write(" : this(");

		foreach(var field in dataInfos.Where(x => x.InitPassLogic != null))
		{
			if (field.InitPassLogic == Default) 
				Write(commaOrNot.Get + field.LowerName);
			else
				Write(commaOrNot.Get + field.InitPassLogic);
		}
		
		Write(")");
	}
}

private void WriteFieldInits(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	foreach(var field in dataInfos) 
	{
		if (field.InitPassLogic != null)
			continue;

		if (field.InitLogic == Default)
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
		else if (field.InitLogic != null)
			WriteLine(indent.Get + field.InitLogic);
		else if (field.IsMap)
			WriteMapInit(field, indent);
		else
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.LowerName + ";");		
	}
}

private void WriteMapInit(DataInfo field, FirstCase indent)
{
	WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
	WriteLine(indent.Get + "foreach(var item in " + (field.InitParams != null ? field.InitParams[1] : field.LowerName) + ")");
	Write(indent.Get + "	this."  + field.Name + ".Add(");
	
	if (field.GenericParams[0].InitLogic == null)
		Write("item");
	else
		Write(field.GenericParams[0].InitLogic);
	
	Write(", ");
	
	if (field.GenericParams[1].InitLogic == null)
		Write("new " + field.GenericParams[1].Type + "()");
	else
		Write(field.GenericParams[1].InitLogic);
		
	WriteLine(");");
}

private bool NeedCopyConstructor(DataInfo[] dataInfos)
{
	if (SuperClassHasCopyConstructor)
		return true;
	
	if (dataInfos.Any(x => 
			(x.CopyMethodNeedPlayersRemap || x.CopyMethodNeedGalaxyRemap) && x.CopyFromRemap == null ||
			x.ExtraCopyParams != null ||
			x.HasCopyMethod ||
			x.CopyLogic != null ||
			(x.InitParams != null && x.CopyFromRemap == null && x.CopyLogic == null && x.CopyPassLogic == null)
	   ))
		return true;
	
	return false;
}

private void WriteCopyConstructorDefinition(string className, params DataInfo[] dataInfos)
{
	string constructorModifer = modifer.Contains("abstract") ? "protected" : "private";
	
	Write(constructorModifer + " " + className + "(" + className + " original");
	
	if (dataInfos.Any(x => x.CopyMethodNeedPlayersRemap && x.CopyFromRemap == null))
		Write(", PlayersRemap playersRemap");
	
	if (dataInfos.Any(x => x.CopyMethodNeedGalaxyRemap && x.CopyFromRemap == null))
		Write(", GalaxyRemap galaxyRemap");
	
	foreach(var field in dataInfos)
	{
		if (field.ExtraCopyParams != null)
		{		
			foreach(var param in field.ExtraCopyParams)
				Write(", " + param);
		}
		else if (field.CopyPassLogic != null || field.CopyFromRemap != null)
			Write(", " + field.Type + " " + field.LowerName);
	}
	
	Write(")");
	
	if (dataInfos.Any(x => x.CopyPassLogic != null))
	{
		if (dataInfos.Any(x => x.BaseCopy))
			Write(" : base(");
		else
			Write(" : this(");

		var commaOrNot = new FirstCase("", ", ");
		if (SuperClassHasCopyConstructor)
			Write(commaOrNot.Get + "original");

		foreach(var field in dataInfos.Where(x => x.CopyPassLogic != null))
		{
			if (field.CopyPassLogic == Default) 
				Write(commaOrNot.Get + field.LowerName);
			else
				Write(commaOrNot.Get + field.CopyPassLogic);
		}
		
		Write(")");
	}	
}

private void WriteLoadContructorDefinition(string className)
{
	string constructorModifer = modifer.Contains("abstract") ? "protected" : "private";
	string deindexer = (LoadNeedsObjectDeindexer) ? ", ObjectDeindexer deindexer" : "";
	
	Write(constructorModifer + " " + className + "(IkonComposite rawData" + deindexer + ")");
	
	if (SuperClass != null) {
		deindexer = (LoadNeedsObjectDeindexer) ? ", deindexer" : "";
		Write(" : base(rawData" + deindexer + ")");
	}
}

private void WriteFieldCopys(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	foreach(var field in dataInfos) 
	{
		if (field.HasCopyMethod)
		{
			var commaOrNot = new FirstCase("", ", ");
			Write(indent.Get + "this."  + field.Name + " = original." + field.Name + ".Copy(");
			
			if (field.CopyMethodNeedGalaxyRemap)
				Write(commaOrNot.Get + "galaxyRemap");
			if (field.CopyMethodNeedPlayersRemap)
				Write(commaOrNot.Get + "playersRemap");
				
			WriteLine(");");
		}
		else if (field.CopyLogic != null)
			WriteLine(indent.Get + field.CopyLogic.Replace(AssignCode, "this."  + field.Name + " = "));
		else if (field.CopyFromRemap != null && field.CopyPassLogic == null)
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.LowerName + ";");
		else if (field.IsCollection)
			WriteListCopy(field, indent);
		else if (field.IsMap)
			WriteMapCopy(field, indent);
		else if (field.CopyLogic == null && field.CopyFromRemap == null && field.CopyPassLogic == null)
			WriteLine(indent.Get + "this."  + field.Name + " = original." + field.Name + ";");
	}
}

private void WriteListCopy(DataInfo field, FirstCase indent)
{
	WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
	WriteLine(indent.Get + "foreach(var item in original." + field.Name + ")");
	Write(indent.Get + "	this."  + field.Name + ".Add(");
	
	if (field.GenericParams[0].CopyLogic != null)
		Write(field.GenericParams[0].CopyLogic.Replace(Default, "item"));
	else if (field.GenericParams[0].CopyFromRemap != null)
		Write(field.GenericParams[0].CopyFromRemap.Replace(Default, "item"));
	else
		Write("item");
	
	WriteLine(");");
}

private void WriteMapCopy(DataInfo field, FirstCase indent)
{
	WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
	WriteLine(indent.Get + "foreach(var item in original." + field.Name + ")");
	Write(indent.Get + "	this."  + field.Name + ".Add(");
	
	if (field.GenericParams[0].CopyLogic != null)
		Write(field.GenericParams[0].CopyLogic);
	else if (field.GenericParams[0].CopyFromRemap != null)
		Write(field.GenericParams[0].CopyFromRemap.Replace(Default, "item.Key"));
	else
		Write("item.Key");
	
	Write(", ");
	
	if (field.GenericParams[1].CopyLogic != null)
		Write(field.GenericParams[1].CopyLogic.Replace(Default, "item.Value"));
	else if (field.GenericParams[1].CopyFromRemap != null)
		Write(field.GenericParams[1].CopyFromRemap.Replace(Default, "item.Value"));
	else
		Write("item.Value");
		
	WriteLine(");");
}

private void WriteFieldLoad(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	var emptyLine = new FirstCase(null, "");

	foreach(var field in dataInfos)
	{
		if (!field.DoSaveLoad)
			continue;
		if (emptyLine.Get != null)
			WriteLine("");
		
		string saveData = field.LowerName + "Save";
		WriteLine(indent.Get + "var " + saveData + " = rawData[" + field.SavingKeyName + "];");
		
		if (field.IsCollection && !field.LoadOverride)
			WriteListLoad(field, indent, saveData);
		else if (field.IsMap && !field.LoadOverride)
			WriteMapLoad(field, indent, saveData);
		else if (field.LoadAssignLogic != null)
		{
			if (field.LoadAssignInit != null)
				foreach(var line in field.LoadAssignInit)
					WriteLine(indent.Get + line);
					
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.LoadAssignLogic.Replace(SaveName, saveData) + ";");
		} else
			WriteLine(indent.Get + "//FIXME: undefined load logic for " + field.Name);
	}
}

private void WriteListLoad(DataInfo field, FirstCase indent, string saveData)
{
	WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
	WriteLine(indent.Get + "foreach(var item in " + saveData + ".To<IkonArray>())");
	WriteLine(indent.Get + "	" + "this."  + field.Name + ".Add(" + field.GenericParams[0].LoadAssignLogic.Replace(SaveName, "item") + ");");
}

private void WriteMapLoad(DataInfo field, FirstCase indent, string saveData)
{
	WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
	WriteLine(indent.Get + "foreach(var item in " + saveData + ".To<IEnumerable<IkonComposite>>()) {");
	WriteLine(indent.Get + "	" + "var itemKey = item["  + field.GenericParams[0].SavingKeyName + "];");
	WriteLine(indent.Get + "	" + "var itemValue = item["  + field.GenericParams[1].SavingKeyName + "];");
	WriteLine(indent.Get + "	this."  + field.Name + ".Add(");
	WriteLine(indent.Get + "		"  + field.GenericParams[0].LoadAssignLogic.Replace(SaveName, "itemKey") + ",");
	WriteLine(indent.Get + "		"  + field.GenericParams[1].LoadAssignLogic.Replace(SaveName, "itemValue"));
	WriteLine(indent.Get + "	);");
	WriteLine(indent.Get + "}");
}

private void WriteCopyMethodDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + " Copy(");
	var commaOrNot = new FirstCase("", ", ");
	
	if (dataInfos.Any(x => x.CopyMethodNeedPlayersRemap))
		Write(commaOrNot.Get + "PlayersRemap playersRemap");
	
	if (dataInfos.Any(x => x.CopyMethodNeedGalaxyRemap))
		Write(commaOrNot.Get + "GalaxyRemap galaxyRemap");
	
	Write(")");
}

private void WriteCopyCall(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	var commaOrNot = new FirstCase("", ", ");
	
	if (NeedCopyConstructor(dataInfos))
	{
		Write(commaOrNot.Get + "this");
		
		if (dataInfos.Any(x => x.CopyMethodNeedPlayersRemap && x.CopyFromRemap == null))
			Write(commaOrNot.Get + "playersRemap");
	
		if (dataInfos.Any(x => x.CopyMethodNeedGalaxyRemap && x.CopyFromRemap == null))
			Write(commaOrNot.Get + "galaxyRemap");
			
		foreach(var field in dataInfos.Where(x => x.CopyFromRemap != null)) 
			Write(commaOrNot.Get + field.CopyFromRemap);
	}
	else 
	{
		foreach(var field in dataInfos) 
		{
			Write(commaOrNot.Get);
			
			if (field.CopyFromRemap != null)
				Write(field.CopyFromRemap);
			else
				Write("this." + field.Name);
		}
	}
	
	WriteLine(");");
}

private void WriteSaveMethodDefinition(params DataInfo[] dataInfos)
{
	var polymorfismModifer = modifer.Contains("abstract") ? "virtual " : SuperClass != null ? "override " : "";
	
	Write("public " + polymorfismModifer + "IkonComposite Save(");
	
	if (SaveNeedsObjectIndexer)
		Write("ObjectIndexer indexer");
		
	Write(")");
}

private void WriteSaveMethod(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	var emptyLine = new FirstCase(null, "");

	if (SuperClass != null)
		WriteLine(indent.Get + "var data = base.Save(" + (SaveNeedsObjectIndexer ? "indexer" : "") + ");");
	else
		WriteLine(indent.Get + "var data = new IkonComposite(TableTag);");

	foreach(var field in dataInfos)
	{
		if (!field.DoSaveLoad)
			continue;
		if (emptyLine.Get != null)
				WriteLine("");
		
		if (field.IsCollection && !field.SaveOverride)
			WriteListSave(field, indent);
		else if (field.IsMap && !field.SaveOverride)
			WriteMapSave(field, indent);
		else if (field.SaveAssignInit != null) {
			foreach(var line in field.SaveAssignInit)
				WriteLine(indent.Get + line);
		}

		Write(indent.Get + "data.Add(" + field.SavingKeyName + ", " + field.SaveAssignLogic.Replace(SaveName, "this." + field.Name) + ");");
		WriteLine("");
	}
	
	WriteLine(indent.Get + "return data;");
}

private void WriteListSave(DataInfo field, FirstCase indent)
{
	string dataVar = field.LowerName + "Data";
	
	WriteLine(indent.Get + "var "  + dataVar + " = new IkonArray();");
	WriteLine(indent.Get + "foreach(var item in this." + field.Name + ")");
	WriteLine(indent.Get + "	" + dataVar + ".Add(" + field.GenericParams[0].SaveAssignLogic.Replace(SaveName, "item") + ");");
}

private void WriteMapSave(DataInfo field, FirstCase indent)
{
	string dataVar = field.LowerName + "Data";
	
	WriteLine(indent.Get + "var "  + dataVar + " = new IkonArray();");
	WriteLine(indent.Get + "foreach(var item in this." + field.Name + ") {");
	WriteLine(indent.Get + "	var itemData = new IkonComposite("  + field.SavingTagName + ");");
	WriteLine(indent.Get + "	itemData.Add("  + field.GenericParams[0].SavingKeyName + ", " + field.GenericParams[0].SaveAssignLogic.Replace(SaveName, "item.Key") + ");");
	WriteLine(indent.Get + "	itemData.Add("  + field.GenericParams[1].SavingKeyName + ", " + field.GenericParams[1].SaveAssignLogic.Replace(SaveName, "item.Value") + ");");
	WriteLine(indent.Get + "	" + dataVar + ".Add(itemData);");
	WriteLine(indent.Get + "}");
}

private void WriteLoadMethod(string className)
{
	var indent = new FirstCase("", "			");
	string deindexer = (LoadNeedsObjectDeindexer) ? ", deindexer" : "";

	WriteLine(indent.Get + "var loadedData = new " + className + "(rawData" + deindexer + ");");
	WriteLine(indent.Get + "deindexer.Add(loadedData);");
	
	WriteLine(indent.Get + "return loadedData;");
}

private void WriteSaveTag(string className)
{
	if (modifer.Contains("abstract"))
		WriteLine("protected abstract string TableTag { get; }");
	else if (SuperClass != null)
		WriteLine("protected override string TableTag { get { return \"" + (TableTag ?? className) + "\"; } }");
	else
		WriteLine("private const string TableTag = \"" + (TableTag ?? className) + "\";"); 
}

private void WriteSaveKeys(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "		");

	foreach(var field in dataInfos)
	{
		Write(indent.Get + "private const string " + field.SavingKeyName);
		WriteLine(" = \"" + (field.SavingKeyValue ?? field.LowerName) + "\";");
		
		if (field.IsMap) {
			Write(indent.Get + "private const string " + field.SavingTagName);
			WriteLine(" = \"" + (field.SavingTagValue ?? field.LowerName) + "\";");
			
			foreach(var gParam in field.GenericParams) {
				Write(indent.Get + "private const string " + gParam.SavingKeyName);
				WriteLine(" = \"" + (gParam.SavingKeyValue ?? gParam.Type.ToLower()) + "\";");
			}
		}
	}
}

private void Begin(string namespaceName, string className, params DataInfo[] dataInfos)
{
	WriteUsings(); #>

namespace <#+ Write(namespaceName); #> 
{
	<#+ WriteClassDefinition(className); #> 
	{
		<#+ WriteFields(dataInfos); #>

		public <#+ WriteContructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldInits(dataInfos); #> 
		} 

<#+ if (NeedCopyConstructor(dataInfos)) { #>
		<#+ WriteCopyConstructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldCopys(dataInfos); #> 
		}
<#+ } #>

		<#+ WriteLoadContructorDefinition(className); #> 
		{
			<#+ WriteFieldLoad(dataInfos); #> 
		}

<#+ if (!modifer.Contains("abstract")) { #>
		internal <#+ WriteCopyMethodDefinition(className, dataInfos); #> 
		{
			return new <#+ WriteCopyCall(className, dataInfos); #> 
		} 
<#+ } #> 

		#region Saving
		<#+ WriteSaveMethodDefinition(dataInfos); #> 
		{
			<#+ WriteSaveMethod(dataInfos); #> 
		}

<#+ if (!modifer.Contains("abstract")) { #>
		public static <#= className #> Load(IkonComposite rawData, ObjectDeindexer deindexer)
		{
			<#+ WriteLoadMethod(className); #>
		}
<#+ } #> 

		<#+ WriteSaveTag(className); #>
		<#+ WriteSaveKeys(dataInfos); #> 
		#endregion
<#+
}

private void End()
{
	WriteLine("	}");
	WriteLine("}");
}

private void Generate(string namespaceName, string className, params DataInfo[] dataInfos)
{
	Begin(namespaceName, className, dataInfos);
	End();
}
#>

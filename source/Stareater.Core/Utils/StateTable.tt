<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Collections.Generic" #>
<#+
private string modifer = "";
private List<string> usings = new List<string>();
private List<string> genericTypes = new List<string>();

private string superClass = null;
private string superConstructor = null;

private bool superClassHasCopyConstructor = false;

enum Flags
{
	None = 0,
	UseDefaultConstructor = 1,
}

class DataInfo
{
	public string Name;
	public string Type;

	public string CopyFromGalaxyRemap;
	public string CopyFromPlayersRemap;
	
	public string BaseFieldInitCode = null;
	public string BaseFieldReadCode = null;
	public string CopyLogic;
	public string DefaultConstructorCall;
	public string SetModifer = "private";
	
	public bool BaseField = false;
	public bool CopyConstructorOnly = false;
	

	public DataInfo(string name, string type) {
		this.Name = name;
		this.Type = type;
		
		this.CopyLogic = "original." + name + ";";
		this.CopyFromGalaxyRemap = initGalaxyRemapCode("this." + name, type);
		this.CopyFromPlayersRemap = initPlayerRemapCode("this." + name, type);
		this.DefaultConstructorCall = "new " + type + "()";
	}
	
	private static string initGalaxyRemapCode(string readCode, string type)
	{
		if (type == "StarData")
			return "galaxyRemap.Stars[" + readCode + "]";
		else if (type == "Planet")
			return "galaxyRemap.Planets[" + readCode + "]";
		return null;
	}
	
	private static string initPlayerRemapCode(string readCode, string type)
	{
		if (type == "Player")
			return "playersRemap.Players[" + readCode + "]";
		else if (type == "Colony")
			return "playersRemap.Colonies[" + readCode + "]";
		else if (type == "StellarisAdmin")
			return "playersRemap.Stellarises[" + readCode + "]";
		return null;
	}
	
	public DataInfo Constructor(string code)
	{	
		this.DefaultConstructorCall = code;
		return this;
	}
	
	public DataInfo Base()
	{
		this.BaseField = true;
		return this;
	}
	
	public DataInfo Base(string initCode, string readCode)
	{
		this.BaseField = true;
		this.BaseFieldInitCode = initCode;
		this.BaseFieldReadCode = readCode;
		
		this.CopyFromGalaxyRemap = initGalaxyRemapCode(readCode, this.Type);
		this.CopyFromPlayersRemap = initPlayerRemapCode(readCode, this.Type);
		return this;
	}
	
	public DataInfo CopyOnly()
	{
		this.CopyConstructorOnly = true;
		return this;
	}
	
	public DataInfo CopyCode(string code)
	{
		this.CopyLogic = code;
		return this;
	}
	
	public DataInfo PublicSet()
	{
		this.SetModifer = "";
		return this;
	}
}

private string paramName(string fieldName)
{
	if (fieldName.Length > 1) 
		return fieldName.Substring(0, 1).ToLower() + fieldName.Substring(1);
		
	return fieldName.ToLower();
}

private void WriteUsings()
{
	foreach(string usingName in usings)
		WriteLine("using " + usingName + ";");
}
private void WriteClassDefinition(string className)
{
	if (!string.IsNullOrWhiteSpace(modifer))
		Write(modifer.Trim() + " ");
		
	Write("class " + className);
	
	if (genericTypes.Count > 0)
	{
		Write("<");
	
		for(int i = 0; i < genericTypes.Count; i++) {
			string commaOrNot = (i == 0) ? "" : ", ";
			Write(commaOrNot + genericTypes[i]);
		}
		
		Write(">");
	}
	
	if (!string.IsNullOrWhiteSpace(superClass))
		Write(" : " + superClass);
}

private void WriteFields(params DataInfo[] dataInfos)
{
	bool first = true;
	foreach(var field in dataInfos)
	{
		if (field.BaseField)
			continue;
		string indent = (first) ? "" : "		";
		first = false;
		WriteLine(indent + "public "  + field.Type + " " + field.Name + " { get; " + field.SetModifer +" set; }");
	}
}

private void WriteContructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	bool first = true;
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
			
		string commaOrNot = first ? "" : ", ";
		first = false;
		Write(commaOrNot + dataInfos[i].Type + " " + paramName(dataInfos[i].Name));
	}
	
	Write(")");
	
	if (superConstructor != null)
		Write(" : " + superConstructor);
	else if (dataInfos.Any(x => x.BaseField))
	{
		Write(" : base(");
		first = true;
		for(int i = 0; i < dataInfos.Length; i++) {
			if (!dataInfos[i].BaseField)
				continue;
			
			string commaOrNot = first ? "" : ", ";
			first = false;
			if (dataInfos[i].BaseFieldInitCode == null)
				Write(commaOrNot + paramName(dataInfos[i].Name));
			else
				Write(commaOrNot + dataInfos[i].BaseFieldInitCode);
		}
		Write(")");
	}
}

private void WriteFieldInits(params DataInfo[] dataInfos)
{
	bool first = true;
	foreach(var field in dataInfos) 
	{
		if (field.CopyConstructorOnly || field.BaseField)
			continue;
			
		string indent = (first) ? "" : "			";
		first = false;
		WriteLine(indent + "this."  + field.Name + " = " + paramName(field.Name) + ";");
	}
	
	foreach(var field in dataInfos) 
	{
		if (!field.CopyConstructorOnly)
			continue;
			
		WriteLine("			this."  + field.Name + " = " + field.DefaultConstructorCall + ";");
	}
}

private void WriteCopyConstructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	Write(className + " original");
	
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
		Write(", " + dataInfos[i].Type + " " + paramName(dataInfos[i].Name));
	}
	
	Write(")");
	
	if (!superClassHasCopyConstructor)
		CallNormalConstructor(dataInfos);
	else
		CallBaseCopyConstructor(dataInfos);
}

private void CallNormalConstructor(params DataInfo[] dataInfos)
{
	Write(" : this(");
	
	bool first = true;
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
			
		string commaOrNot = first ? "" : ", ";
		first = false;
		Write(commaOrNot + paramName(dataInfos[i].Name));
	}
	
	Write(")");
}

private void CallBaseCopyConstructor(params DataInfo[] dataInfos)
{
	Write(" : base(original");
	
	for(int i = 0; i < dataInfos.Length; i++) {
		if (!dataInfos[i].BaseField)
			continue;
			
		if (dataInfos[i].BaseFieldInitCode == null)
			Write(", " + paramName(dataInfos[i].Name));
		else
			Write(", " + dataInfos[i].BaseFieldInitCode);
	}
	
	Write(")");
}

private void WriteFieldCopys(params DataInfo[] dataInfos)
{
	bool first = true;
	foreach(var field in dataInfos) 
	{
		if (!field.CopyConstructorOnly)
			continue;
			
		string indent = (first) ? "" : "			";
		first = false;
		if (field.CopyLogic == null)
			WriteLine(indent + "this."  + field.Name + " = original." + field.Name);
		else
			WriteLine(indent + field.CopyLogic);
	}
}

private void WriteCopyMethod(string className, params DataInfo[] dataInfos)
{
	if (modifer.Contains("abstract"))
		return;
		
	WriteLine("internal " + className + " Copy(" + copyParams(dataInfos) + ")");
	WriteLine("		{");
	Write("			return new " + className + "(");
	
	bool first = true;
	if (dataInfos.Any(x => x.CopyConstructorOnly) || superClassHasCopyConstructor)
	{
		Write("this");
		first = false;
	}
		
	for(int i = 0; i < dataInfos.Length; i++) {
		Write(first ? "" : ", ");
		first = false;
		
		if (dataInfos[i].CopyFromGalaxyRemap != null)
			Write(dataInfos[i].CopyFromGalaxyRemap);
		else if (dataInfos[i].CopyFromPlayersRemap != null)
			Write(dataInfos[i].CopyFromPlayersRemap);
		else
			Write("this." + dataInfos[i].Name);
	}
	
	WriteLine(");");
	WriteLine("		}");
}

private string copyParams(params DataInfo[] dataInfos)
{
	StringBuilder sb = new StringBuilder();
	string separator = "";
	
	if (dataInfos.Any(x => x.CopyFromPlayersRemap != null))
	{
		sb.Append("PlayersRemap playersRemap");
		separator = ", ";
	}
	
	if (dataInfos.Any(x => x.CopyFromGalaxyRemap != null))
	{
		sb.Append(separator);
		sb.Append("GalaxyRemap galaxyRemap");
		separator = ", ";
	}
	
	return sb.ToString();
}

private void Begin(string namespaceName, string className, params DataInfo[] dataInfos)
{
	WriteUsings(); #>

namespace <#+ Write(namespaceName); #> 
{
	<#+ WriteClassDefinition(className); #> 
	{
		<#+ WriteFields(dataInfos); #>

		public <#+ WriteContructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldInits(dataInfos); #>
		}

<#+ if (dataInfos.Any(x => x.CopyConstructorOnly) || superClassHasCopyConstructor) { #>
		internal <#+ WriteCopyConstructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldCopys(dataInfos); #> 
		}
<#+ } #>

		<#+ WriteCopyMethod(className, dataInfos); #> 
<#+
}

private void End()
{
	WriteLine("	}");
	WriteLine("}");
}

private void Generate(string namespaceName, string className, params DataInfo[] dataInfos)
{
	Begin(namespaceName, className, dataInfos);
	End();
}
#>
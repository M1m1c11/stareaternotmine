<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Collections.Generic" #>
<#+
private string modifer = "";
private List<string> usings = new List<string>();
private List<string> genericTypes = new List<string>();

private string superConstructor = null;

enum Flags
{
	None = 0,
	UseDefaultConstructor = 1,
}

class DataInfo
{
	public string Name;
	public string Type;
	
	public string CopyLogic;
	public bool CopyFromGalaxyRemap;
	public string DefaultConstructorCall;
	
	public bool CopyConstructorOnly = false;

	public DataInfo(string name, string type) {
		this.Name = name;
		this.Type = type;
		
		this.CopyLogic = "original." + name + ";";
		this.CopyFromGalaxyRemap = (type == "StarData");
		this.DefaultConstructorCall = "new " + type + "()";
	}
	
	public DataInfo Constructor(string code)
	{	
		this.DefaultConstructorCall = code;
		return this;
	}
	
	public DataInfo CopyOnly()
	{
		this.CopyConstructorOnly = true;
		return this;
	}
	
	public DataInfo CopyCode(string code)
	{
		this.CopyLogic = code;
		return this;
	}
}

private string paramName(string fieldName)
{
	if (fieldName.Length > 1) 
		return fieldName.Substring(0, 1).ToLower() + fieldName.Substring(1);
		
	return fieldName.ToLower();
}

private void WriteUsings()
{
	foreach(string usingName in usings)
		WriteLine("using " + usingName + ";");
}
private void WriteClassDefinition(string className)
{
	if (!string.IsNullOrEmpty(modifer.Trim()))
		Write(modifer.Trim() + " ");
		
	Write("class " + className);
	
	if (genericTypes.Count == 0)
		return;
		
	Write("<");
	
	for(int i = 0; i < genericTypes.Count; i++) {
		string commaOrNot = (i == 0) ? "" : ", ";
		Write(commaOrNot + genericTypes[i]);
	}
	
	Write(">");
}

private void WriteFields(params DataInfo[] dataInfos)
{
	bool first = true;
	foreach(var field in dataInfos)
	{
		string indent = (first) ? "" : "		";
		first = false;
		WriteLine(indent + "public "  + field.Type + " " + field.Name + " { get; private set; }");
	}
}

private void WriteContructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	bool first = true;
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
			
		string commaOrNot = first ? "" : ", ";
		first = false;
		Write(commaOrNot + dataInfos[i].Type + " " + paramName(dataInfos[i].Name));
	}
	
	Write(")");
	
	if (superConstructor != null)
		Write(" : " + superConstructor);
}

private void WriteFieldInits(params DataInfo[] dataInfos)
{
	bool first = true;
	foreach(var field in dataInfos) 
	{
		if (field.CopyConstructorOnly)
			continue;
			
		string indent = (first) ? "" : "			";
		first = false;
		WriteLine(indent + "this."  + field.Name + " = " + paramName(field.Name) + ";");
	}
	
	foreach(var field in dataInfos) 
	{
		if (!field.CopyConstructorOnly)
			continue;
			
		WriteLine("			this."  + field.Name + " = " + field.DefaultConstructorCall + ";");
	}
}

private void WriteCopyConstructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	Write(className + " original");
	
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
		Write(", " + dataInfos[i].Type + " " + paramName(dataInfos[i].Name));
	}
	
	Write(")");
	
	CallNormalConstructor(dataInfos);
}

private void CallNormalConstructor(params DataInfo[] dataInfos)
{
	Write(" : this(");
	
	bool first = true;
	for(int i = 0; i < dataInfos.Length; i++) {
		if (dataInfos[i].CopyConstructorOnly)
			continue;
			
		string commaOrNot = first ? "" : ", ";
		first = false;
		Write(commaOrNot + paramName(dataInfos[i].Name));
	}
	
	Write(")");
}

private void WriteFieldCopys(params DataInfo[] dataInfos)
{
	bool first = true;
	foreach(var field in dataInfos) 
	{
		if (!field.CopyConstructorOnly)
			continue;
			
		string indent = (first) ? "" : "			";
		first = false;
		if (field.CopyLogic == null)
			WriteLine(indent + "this."  + field.Name + " = original." + field.Name);
		else
			WriteLine(indent + field.CopyLogic);
	}
}

private void WriteCopyMethod(string className, params DataInfo[] dataInfos)
{
	if (modifer.Contains("abstract"))
		return;
		
	bool needsGalaxyRemap = dataInfos.Any(x => x.Type == "StarData");

	WriteLine("internal " + className + " Copy(" + copyParams(dataInfos) + ")");
	WriteLine("		{");
	Write("			return new " + className + "(");
	
	for(int i = 0; i < dataInfos.Length; i++) {
		Write((i == 0) ? "" : ", ");
		string val = "this." + dataInfos[i].Name;
		
		if (dataInfos[i].CopyFromGalaxyRemap)
			Write("galaxyRemap.Stars[" + val + "]");
		else
			Write(val);
	}
	
	WriteLine(");");
	WriteLine("		}");
}

private string copyParams(params DataInfo[] dataInfos)
{
	StringBuilder sb = new StringBuilder();
	string separator = "";
	
	if (dataInfos.Any(x => x.CopyFromGalaxyRemap))
	{
		sb.Append("GalaxyRemap galaxyRemap");
		separator = ", ";
	}
	
	return sb.ToString();
}

private void Begin(string namespaceName, string className, params DataInfo[] dataInfos)
{
	WriteUsings(); #>

namespace <#+ Write(namespaceName); #> 
{
	<#+ WriteClassDefinition(className); #> 
	{
		<#+ WriteFields(dataInfos); #>

		public <#+ WriteContructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldInits(dataInfos); #>
		}

<#+ if (dataInfos.Any(x => x.CopyConstructorOnly)) { #>
		internal <#+ WriteCopyConstructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldCopys(dataInfos); #>
		}
<#+ } #>

		<#+ WriteCopyMethod(className, dataInfos); #> 
<#+
}

private void End()
{
	WriteLine("	}");
	WriteLine("}");
}

private void Generate(string namespaceName, string className, params DataInfo[] dataInfos)
{
	Begin(namespaceName, className, dataInfos);
	End();
}
#>
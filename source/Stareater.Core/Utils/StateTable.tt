<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Collections.Generic" #>
<#+
private string modifer = "";
private List<string> usings = new List<string>();
private List<string> genericTypes = new List<string>();

private string SuperClass = null;
private bool initWithDefaultConstructor = false;

private bool SuperClassHasCopyConstructor = false;

const string Default = "#Default#";

class DataInfo
{
	private string name;
	
	// Type data
	public string type;
	public string[] GenericParams = null;
	public string ConcreteType = null;
	public string[] GenericConcreteParams = null;
	
	// Field data
	public string BaseReadCode = null;
	public bool PublicGet = true;
	public bool PublicSet = false;

	// Initialization data
	public bool BaseInit = false;
	public string[] ExtraInitParams = null;	//null -> same as type, [0] -> none
	public string InitPassLogic = null; //null -> no pass, Default -> pass value
	public string InitLogic = null;	//null -> copy value, Default -> default constructor
	
	// Copy requirements
	public bool CopyMethodNeedGalaxyRemap = false;
	public bool CopyMethodNeedPlayersRemap = false;
	
	//Copy logic
	public bool BaseCopy = false;
	public string[] ExtraCopyParams = null;	//null -> none
	public bool HasCopyMethod = false;
	public string CopyFromRemap = null;	//null -> pass logic
	public string CopyPassLogic = null; //null -> no pass, Default -> pass value
	public string CopyLogic = null;	//null -> copy value, "" -> none

	public DataInfo(string name, string type, params string[] genericParams) {
		this.name = name;
		this.type = type;
		this.GenericParams = genericParams;
		
		initRemapCode();
	}
	
	private void initRemapCode()
	{
		string readCode = BaseReadCode ?? "this." + Name;
		
		if (this.type == "StarData")
			this.CopyFromRemap = "galaxyRemap.Stars[" + readCode + "]";
		else if (this.type == "Planet")
			this.CopyFromRemap = "galaxyRemap.Planets[" + readCode + "]";
		
		else if (this.type == "Player")
			this.CopyFromRemap =  "playersRemap.Players[" + readCode + "]";
		else if (this.type == "Colony")
			this.CopyFromRemap =  "playersRemap.Colonies[" + readCode + "]";
		else if (this.type == "StellarisAdmin")
			this.CopyFromRemap =  "playersRemap.Stellarises[" + readCode + "]";
		else if (this.type == "Design")
			this.CopyFromRemap =  "playersRemap.Designs[" + readCode + "]";
		else if (this.type == "IdleFleet")
			this.CopyFromRemap =  "playersRemap.IdleFleets[" + readCode + "]";
			
		this.CopyMethodNeedGalaxyRemap = (this.CopyFromRemap != null) && (this.CopyFromRemap.StartsWith("galaxyRemap"));
		this.CopyMethodNeedPlayersRemap = (this.CopyFromRemap != null) && (this.CopyFromRemap.StartsWith("playersRemap"));		
	}
	
	private string paramName()
	{
		if (name.Length > 1) 
			return name.Substring(0, 1).ToLower() + name.Substring(1);
			
		return name.ToLower();
	}
	
	private static void buildGenericParams(StringBuilder sb, string[] genericParams)
	{
		var commaOrNot = new FirstCase("", ", ");
		
		sb.Append("<");
		foreach(var gParam in genericParams)
			sb.Append(commaOrNot.Get + gParam);
		sb.Append(">");
	}
	
	private void analyzeRemapNeeds(string code)
	{
		this.CopyMethodNeedGalaxyRemap = code.Contains("galaxyRemap");
		this.CopyMethodNeedPlayersRemap = code.Contains("playersRemap");
	}
	
	public string Name
	{
		get
		{
			if (!PublicGet && !PublicSet)
				return paramName();
				
			return name;
		}
	}
	
	public string LowerName
	{
		get
		{
			return paramName();
		}
	}
	
	public string Type
	{
		get
		{
			StringBuilder sb = new StringBuilder(this.type);

			if (this.GenericParams != null && this.GenericParams.Length > 0)
				buildGenericParams(sb, this.GenericParams);
			
			return sb.ToString();
		}
	}
	
	public string Constructor
	{
		get
		{
			StringBuilder sb = new StringBuilder("new ");
			string[] genericParams = this.GenericParams;
			
			if (this.ConcreteType != null)
			{
				sb.Append(this.ConcreteType);
				if (this.GenericConcreteParams != null)
					genericParams = this.GenericConcreteParams;
			}
			else
				sb.Append(this.type);
				
			if (genericParams != null && genericParams.Length > 0)
				buildGenericParams(sb, genericParams);
				
			sb.Append("();");
			return sb.ToString();
		}
	}
	
	/*
		Type specifications
	*/
	public DataInfo SubType(string typeName)
	{	
		this.ConcreteType = typeName;
		return this;
	}
	
	public DataInfo SubTypeGeneric(string typeName, params string[] genericParams)
	{	
		if (genericParams != null || genericParams.Length == 0)
			genericParams = null;
			
		this.SubType(typeName);
		this.GenericConcreteParams = genericParams ?? this.GenericParams;
		return this;
	}
	
	/*
		Access specifications
	*/
	
	public DataInfo Private()
	{
		this.PublicGet = false;
		return this;
	}
	
	public DataInfo Public()
	{
		this.PublicSet = true;
		return this;
	}
	
	public DataInfo Base()
	{
		this.BaseInit = true;
		this.InitPassLogic = Default;
		
		this.BaseCopy = true;
		this.CopyPassLogic = Default;
		return this;
	}
	
	public DataInfo Base(string setCode, string getCode)
	{
		this.Base();
		this.InitPassLogic = setCode;
		this.BaseReadCode = getCode;
		this.CopyPassLogic = setCode;
		
		initRemapCode();
		return this;
	}
	
	/*
		Initialization logic
	*/
	
	public DataInfo Derived(string initCode, params string[] extraConstructorParams)
	{
		this.InitLogic = initCode;
		this.ExtraInitParams = extraConstructorParams;
		return this;
	}
	
	public DataInfo InitValue(string valueCode)
	{
		this.InitLogic = "this." + this.Name + " = " + valueCode + ";";
		return this;
	}
	
	/*
		Copy logic specification
	*/
	
	public DataInfo CopyOnly()
	{
		this.ExtraInitParams = new string[0];
		this.InitLogic = this.InitLogic ?? Default;
		return this;
	}
	
	public DataInfo CopyOnly(string code)
	{
		this.CopyOnly();
		this.CopyCode(code);
		return this;
	}
	
	public DataInfo CopyCode(string code)
	{
		this.CopyLogic = code;
		this.analyzeRemapNeeds(code);
		return this;
	}
	
	public DataInfo CopyParamPass()
	{
		this.CopyPassLogic = Default;
		this.ExtraCopyParams = new string[] { this.Type + " " + this.LowerName };
		return this;
	}
	
	public DataInfo CopyRecursive(bool needGalaxyRemap, bool needPlayerRemap)
	{
		this.HasCopyMethod = true;
		this.CopyMethodNeedGalaxyRemap = needGalaxyRemap;
		this.CopyMethodNeedPlayersRemap = needPlayerRemap;
		return this;
	}
}

class FirstCase
{
	private string firstCase;
	private string otherCases;
	private bool first = true;
	
	public FirstCase(string firstCase, string otherCases)
	{
		this.firstCase = firstCase;
		this.otherCases = otherCases;
	}
	
	public string Get
	{
		get
		{
			string result = first ? firstCase : otherCases;
			first = false;
			
			return result;
		}
	}
}

private void WriteUsings()
{
	foreach(string usingName in usings)
		WriteLine("using " + usingName + ";");
}
private void WriteClassDefinition(string className)
{
	if (!string.IsNullOrWhiteSpace(modifer))
		Write(modifer.Trim() + " ");
		
	Write("class " + className);
	
	if (genericTypes.Count > 0)
	{
		Write("<");
	
		var commaOrNot = new FirstCase("", ", ");
		for(int i = 0; i < genericTypes.Count; i++) {
			Write(commaOrNot.Get + genericTypes[i]);
		}
		
		Write(">");
	}
	
	if (!string.IsNullOrWhiteSpace(SuperClass))
		Write(" : " + SuperClass);
}

private void WriteFields(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "		");
	foreach(var field in dataInfos)
	{
		if (field.BaseInit)
			continue;
		
		if (!field.PublicGet && !field.PublicSet)
			WriteLine(indent.Get + "private " + field.Type + " " + field.Name + ";");
		else
		{
			string getMod = field.PublicGet ? "" : "private ";
			string setMod = field.PublicSet ? "" : "private ";
			WriteLine(indent.Get + "public " + field.Type + " " + field.Name + " { " + getMod + "get; " + setMod + "set; }");
		}
	}
}

private void WriteContructorDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	
	var commaOrNot = new FirstCase("", ", ");
	foreach(var field in dataInfos) 
	{
		if (field.ExtraInitParams == null)
			Write(commaOrNot.Get + field.Type + " " + field.LowerName);
		else
			foreach(var param in field.ExtraInitParams)
				Write(commaOrNot.Get + param);
	}
	
	Write(")");
	
	if (dataInfos.Any(x => x.InitPassLogic != null) || initWithDefaultConstructor)
	{
		commaOrNot = new FirstCase("", ", ");
		if (dataInfos.Any(x => x.BaseInit))
			Write(" : base(");
		else
			Write(" : this(");

		foreach(var field in dataInfos.Where(x => x.InitPassLogic != null))
		{
			if (field.InitPassLogic == Default) 
				Write(commaOrNot.Get + field.LowerName);
			else
				Write(commaOrNot.Get + field.InitPassLogic);
		}
		
		Write(")");
	}
}

private void WriteFieldInits(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	foreach(var field in dataInfos) 
	{
		if (field.InitPassLogic != null)
			continue;

		if (field.InitLogic == null)
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.LowerName + ";");
		else if (field.InitLogic == Default)
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.Constructor);
		else 
			WriteLine(indent.Get + field.InitLogic);
	}
}

private bool NeedCopyConstructor(DataInfo[] dataInfos)
{
	if (SuperClassHasCopyConstructor)
		return true;
	
	if (dataInfos.Any(x => 
			(x.CopyMethodNeedPlayersRemap || x.CopyMethodNeedGalaxyRemap) && x.CopyFromRemap == null ||
			x.ExtraCopyParams != null ||
			x.HasCopyMethod ||
			x.CopyLogic != null ||
			(x.ExtraInitParams != null && x.CopyFromRemap == null && x.CopyLogic == null && x.CopyPassLogic == null)
	   ))
		return true;
	
	return false;
}

private void WriteCopyConstructorDefinition(string className, params DataInfo[] dataInfos)
{
	string constructorModifer = modifer.Contains("abstract") ? "protected" : "private";
	
	Write(constructorModifer + " " + className + "(" + className + " original");
	
	if (dataInfos.Any(x => x.CopyMethodNeedPlayersRemap && x.CopyFromRemap == null))
		Write(", PlayersRemap playersRemap");
	
	if (dataInfos.Any(x => x.CopyMethodNeedGalaxyRemap && x.CopyFromRemap == null))
		Write(", GalaxyRemap galaxyRemap");
	
	foreach(var field in dataInfos)
	{
		if (field.ExtraCopyParams != null)
		{		
			foreach(var param in field.ExtraCopyParams)
				Write(", " + param);
		}
		else if (field.CopyPassLogic != null || field.CopyFromRemap != null)
			Write(", " + field.Type + " " + field.LowerName);
	}
	
	Write(")");
	
	if (dataInfos.Any(x => x.CopyPassLogic != null))
	{
		if (dataInfos.Any(x => x.BaseCopy))
			Write(" : base(");
		else
			Write(" : this(");

		var commaOrNot = new FirstCase("", ", ");
		if (SuperClassHasCopyConstructor)
			Write(commaOrNot.Get + "original");

		foreach(var field in dataInfos.Where(x => x.CopyPassLogic != null))
		{
			if (field.CopyPassLogic == Default) 
				Write(commaOrNot.Get + field.LowerName);
			else
				Write(commaOrNot.Get + field.CopyPassLogic);
		}
		
		Write(")");
	}	
}

private void WriteFieldCopys(params DataInfo[] dataInfos)
{
	var indent = new FirstCase("", "			");
	foreach(var field in dataInfos) 
	{
		if (field.HasCopyMethod)
		{
			var commaOrNot = new FirstCase("", ", ");
			Write(indent.Get + "this."  + field.Name + " = original." + field.Name + ".Copy(");
			
			if (field.CopyMethodNeedGalaxyRemap)
				Write(commaOrNot.Get + "galaxyRemap");
			if (field.CopyMethodNeedPlayersRemap)
				Write(commaOrNot.Get + "playersRemap");
				
			WriteLine(");");
		}
		else if (field.CopyLogic == null && field.CopyFromRemap == null && field.CopyPassLogic == null)
			WriteLine(indent.Get + "this."  + field.Name + " = original." + field.Name + ";");
		else if (field.CopyLogic != null)
			WriteLine(indent.Get + field.CopyLogic);
		else if (field.CopyFromRemap != null && field.CopyPassLogic == null)
			WriteLine(indent.Get + "this."  + field.Name + " = " + field.LowerName + ";");
	}
}
private void WriteCopyMethodDefinition(string className, params DataInfo[] dataInfos)
{
	Write(className + " Copy(");
	var commaOrNot = new FirstCase("", ", ");
	
	if (dataInfos.Any(x => x.CopyMethodNeedPlayersRemap))
		Write(commaOrNot.Get + "PlayersRemap playersRemap");
	
	if (dataInfos.Any(x => x.CopyMethodNeedGalaxyRemap))
		Write(commaOrNot.Get + "GalaxyRemap galaxyRemap");
	
	Write(")");
}

private void WriteCopyCall(string className, params DataInfo[] dataInfos)
{
	Write(className + "(");
	var commaOrNot = new FirstCase("", ", ");
	
	if (NeedCopyConstructor(dataInfos))
	{
		Write(commaOrNot.Get + "this");
		
		if (dataInfos.Any(x => x.CopyMethodNeedPlayersRemap && x.CopyFromRemap == null))
			Write(commaOrNot.Get + "playersRemap");
	
		if (dataInfos.Any(x => x.CopyMethodNeedGalaxyRemap && x.CopyFromRemap == null))
			Write(commaOrNot.Get + "galaxyRemap");
			
		foreach(var field in dataInfos.Where(x => x.CopyFromRemap != null)) 
			Write(commaOrNot.Get + field.CopyFromRemap);
	}
	else 
	{
		foreach(var field in dataInfos) 
		{
			Write(commaOrNot.Get);
			
			if (field.CopyFromRemap != null)
				Write(field.CopyFromRemap);
			else
				Write("this." + field.Name);
		}
	}
	
	WriteLine(");");
}

private void Begin(string namespaceName, string className, params DataInfo[] dataInfos)
{
	WriteUsings(); #>

namespace <#+ Write(namespaceName); #> 
{
	<#+ WriteClassDefinition(className); #> 
	{
		<#+ WriteFields(dataInfos); #>

		public <#+ WriteContructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldInits(dataInfos); #> 
		} 

<#+ if (NeedCopyConstructor(dataInfos)) { #>
		<#+ WriteCopyConstructorDefinition(className, dataInfos); #> 
		{
			<#+ WriteFieldCopys(dataInfos); #> 
		}
<#+ } #>

<#+ if (!modifer.Contains("abstract")) { #>
		internal <#+ WriteCopyMethodDefinition(className, dataInfos); #> 
		{
			return new <#+ WriteCopyCall(className, dataInfos); #> 
		} 
<#+ } #> 
<#+
}

private void End()
{
	WriteLine("	}");
	WriteLine("}");
}

private void Generate(string namespaceName, string className, params DataInfo[] dataInfos)
{
	Begin(namespaceName, className, dataInfos);
	End();
}
#>

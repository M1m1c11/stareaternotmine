<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #> 
<#+
const string AssignCode = "#Assign#";
const string Default = "#Default#";
const string None = "#None#";
const string Placeholder = "###";
const string SaveName = "#SaveName#";

enum Flag
{
	GalaxyRemap, 
	PlayerRemap,
	NoIndexer
}

private static string initGalaxyRemapCode(string type, string readCode, out bool copyNeedsRemap)
{
	string copyFromRemap = null;
	
	if (type == "StarData")
		copyFromRemap = "galaxyRemap.Stars[" + readCode + "]";
	else if (type == "Planet")
		copyFromRemap = "galaxyRemap.Planets[" + readCode + "]";

	copyNeedsRemap = (copyFromRemap != null) && (copyFromRemap.StartsWith("galaxyRemap"));
	return copyFromRemap;
}

private static string initPlayerRemapCode(string type, string readCode, out bool copyNeedsRemap)
{
	string copyFromRemap = null;
	
	if (type == "Player")
		copyFromRemap = "playersRemap.Players[" + readCode + "]";
	else if (type == "AConstructionSite")
		copyFromRemap = "playersRemap.Site(" + readCode + ")";
	else if (type == "Colony")
		copyFromRemap = "playersRemap.Colonies[" + readCode + "]";
	else if (type == "StellarisAdmin")
		copyFromRemap = "playersRemap.Stellarises[" + readCode + "]";
	else if (type == "Design")
		copyFromRemap = "playersRemap.Designs[" + readCode + "]";
	else if (type == "IdleFleet")
		copyFromRemap = "playersRemap.IdleFleets[" + readCode + "]";
		
	copyNeedsRemap = (copyFromRemap != null) && (copyFromRemap.StartsWith("playersRemap"));	
	return copyFromRemap;	
}

class DataInfo
{
	private string name;
	
	// Type data
	public string type;
	public GenericParamInfo[] GenericParams = null;
	public string ConcreteType = null;
	
	// Field data
	public string BaseReadCode = null;
	public bool PublicGet = true;
	public bool PublicSet = false;

	// Initialization data
	public bool BaseInit = false;
	public string[] InitParams = null;	//null -> same as type, [0] -> none
	public string InitPassLogic = null; //null -> no pass, Default -> pass value
	public string InitLogic = null;	//null -> copy value, Default -> default constructor
	
	// Copy requirements
	private bool copyMethodNeedGalaxyRemap = false;
	private bool copyMethodNeedPlayersRemap = false;
	
	//Copy logic
	public bool BaseCopy = false;
	public string[] ExtraCopyParams = null;	//null -> none
	public bool HasCopyMethod = false;
	public string CopyFromRemap = null;	//null -> pass logic
	public string CopyPassLogic = null; //null -> no pass, Default -> pass value
	public string CopyLogic = null;	//null -> copy value, Default -> default constructor, None -> none

	//Saving logic
	public string SaveAssignLogic = null;
	public string[] SaveAssignInit = null;
	public string SavingKeyName = null;
	public string SavingKeyValue = null;
	public string SavingTagName = null;
	public string SavingTagValue = null;

	public DataInfo(string name, string type, params GenericParamInfo[] genericParams) {
		this.name = name;
		this.type = type;
		this.GenericParams = genericParams;
		
		this.SavingKeyName = name + "Key";
		this.SavingTagName = name + "Tag";
		
		initRemapCode();
		initSaveCode();
	}

	private void initRemapCode()
	{
		this.CopyFromRemap = 
			initGalaxyRemapCode(this.type, BaseReadCode ?? "this." + Name, out copyMethodNeedGalaxyRemap) ??
			initPlayerRemapCode(this.type, BaseReadCode ?? "this." + Name, out copyMethodNeedPlayersRemap);
	}
	
	private void initSaveCode()
	{
		string dataVar = this.LowerName + "Data";
		string typeName = this.type;

		switch(this.type)
		{
			case "double":
			case "float":
				this.SaveAssignLogic = "new IkonFloat(#SaveName#)";
				break;
			case "int":
			case "long":
				this.SaveAssignLogic = "new IkonInteger(#SaveName#)";
				break;
			case "string":
				this.SaveAssignLogic = "new IkonText(#SaveName#)";
				break;
			case "Color":
				this.SaveAssignInit = new string[] { 
					"var " + dataVar + " = new IkonArray();",
					dataVar + ".Add(new IkonInteger(this." + this.Name + ".R));",
					dataVar + ".Add(new IkonInteger(this." + this.Name + ".G));",
					dataVar + ".Add(new IkonInteger(this." + this.Name + ".B));"
				};
				this.SaveAssignLogic = dataVar;
				break;
			case "Vector2D":
				this.SaveAssignInit = new string[] { 
					"var " + dataVar + " = new IkonArray();",
					dataVar + ".Add(new IkonFloat(this." + this.Name + ".X));",
					dataVar + ".Add(new IkonFloat(this." + this.Name + ".Y));"
				};
				this.SaveAssignLogic = dataVar;
				break;
			case "Dictionary":
				this.SaveAssignLogic = dataVar;
				break;
			default:
				this.SaveAssignLogic = null;
				break;
		}
	}
	
	private string paramName()
	{
		if (name.Length > 1) 
			return name.Substring(0, 1).ToLower() + name.Substring(1);
			
		return name.ToLower();
	}
	
	private static void buildGenericParams(StringBuilder sb, GenericParamInfo[] genericParams)
	{
		var commaOrNot = new FirstCase("", ", ");
		
		sb.Append("<");
		foreach(var gParam in genericParams)
			sb.Append(commaOrNot.Get + gParam.Type);
		sb.Append(">");
	}
	
	private void analyzeRemapNeeds(string code)
	{
		this.copyMethodNeedGalaxyRemap = code.Contains("galaxyRemap");
		this.copyMethodNeedPlayersRemap = code.Contains("playersRemap");
	}
	
	public string Name
	{
		get
		{
			if (!PublicGet && !PublicSet)
				return paramName();
				
			return name;
		}
	}
	
	public string LowerName
	{
		get
		{
			return paramName();
		}
	}

	public string UpperName
	{
		get
		{
			return name;
		}
	}
	
	public string Type
	{
		get
		{
			StringBuilder sb = new StringBuilder(this.type);

			if (this.GenericParams != null && this.GenericParams.Length > 0)
				buildGenericParams(sb, this.GenericParams);
			
			return sb.ToString();
		}
	}
	
	public bool IsMap
	{
		get { return this.type.Contains("Dictionary"); }
	}
	
	public string Constructor
	{
		get
		{
			StringBuilder sb = new StringBuilder("new ");
			
			if (this.ConcreteType != null)
				sb.Append(this.ConcreteType);
			else
				sb.Append(this.type);
				
			if (this.GenericParams != null && this.GenericParams.Length > 0)
				buildGenericParams(sb, this.GenericParams);
				
			sb.Append("();");
			return sb.ToString();
		}
	}
	
	public DataInfo IsState(params Flag[] flags)
	{
		var flagList = new List<Flag>(flags);
		
		this.HasCopyMethod = true;
		this.copyMethodNeedGalaxyRemap |= flagList.Contains(Flag.GalaxyRemap);
		this.copyMethodNeedPlayersRemap |= flagList.Contains(Flag.PlayerRemap);
		
		this.SaveAssignLogic = "this." + Name + ".Save(" + (flagList.Contains(Flag.NoIndexer) ? ")" : "indexer)");
		
		return this;
	}
	
	/*
		Type specifications
	*/
	public DataInfo SubType(string typeName)
	{	
		this.ConcreteType = typeName;
		return this;
	}
	
	/*
		Access specifications
	*/
	
	public DataInfo Private()
	{
		this.PublicGet = false;
		return this;
	}
	
	public DataInfo Public()
	{
		this.PublicSet = true;
		return this;
	}
	
	public DataInfo Base()
	{
		this.BaseInit = true;
		this.InitPassLogic = Default;
		
		this.BaseCopy = true;
		this.CopyPassLogic = Default;
		return this;
	}
	
	public DataInfo Base(string setCode, string getCode)
	{
		this.Base();
		this.InitPassLogic = setCode;
		this.BaseReadCode = getCode;
		this.CopyPassLogic = setCode;
		
		initRemapCode();
		return this;
	}
	
	/*
		Initialization logic
	*/
	
	public DataInfo Derived(string initCode)
	{
		this.InitLogic = initCode;
		this.InitParams = new string[0];
		return this;
	}
	
	public DataInfo Derived(string initCode, string constructorParamType, string constructorParamName)
	{
		this.InitLogic = initCode;
		this.InitParams = new string[] { constructorParamType, constructorParamName };
		return this;
	}
	
	public DataInfo InitValue(string valueCode)
	{
		this.InitLogic = "this." + this.Name + " = " + valueCode + ";";
		return this;
	}
	
	/*
		Copy logic specification
	*/
	
	public bool CopyMethodNeedGalaxyRemap
	{
		get {
			if (this.copyMethodNeedGalaxyRemap)
				return true;
			else if (this.GenericParams != null)
				return this.GenericParams.Any(x => x.CopyMethodNeedGalaxyRemap);
			else
				return false;
		}
	}
	
	public bool CopyMethodNeedPlayersRemap
	{
		get {
			if (this.copyMethodNeedPlayersRemap)
				return true;
			else if (this.GenericParams != null)
				return this.GenericParams.Any(x => x.CopyMethodNeedPlayersRemap);
			else
				return false;
		}
	}
	
	public DataInfo CopyOnly()
	{
		this.InitParams = new string[0];
		this.InitLogic = this.InitLogic ?? Default;
		return this;
	}
	
	public DataInfo CopyOnly(string code)
	{
		this.CopyOnly();
		this.CopyCode(code);
		return this;
	}
	
	public DataInfo CopyAssign(string code)
	{
		this.CopyLogic = AssignCode + code;
		this.analyzeRemapNeeds(code);
		return this;
	}
	
	public DataInfo CopyCode(string code)
	{
		this.CopyLogic = code;
		this.analyzeRemapNeeds(code);
		return this;
	}
	
	public DataInfo CopyParamPass()
	{
		this.CopyPassLogic = Default;
		this.ExtraCopyParams = new string[] { this.Type + " " + this.LowerName };
		return this;
	}
	
	/*
		Saving logic specification
	*/
	
	public DataInfo FromIndexer()
	{
		if (this.type.EndsWith("Collection") || this.type.EndsWith("List"))
		{
			string dataVar = this.LowerName + "Data";
			
			this.SaveAssignInit = new string[] { 
				"var " + dataVar + " = new IkonArray();",
				"foreach(var item in this." + this.Name + ")",
				"	" + dataVar + ".Add(new IkonInteger(indexer.IndexOf(item)));"
			};
			this.SaveAssignLogic = dataVar;
		}
		else
			this.SaveAssignLogic = "new IkonInteger(indexer.IndexOf(this." + Name + "))";
			
		return this;
	}
	
	public DataInfo NoSaveLoad()
	{
		this.SaveAssignLogic = null;
		return this;
	}
	
	public DataInfo SaveAssign(string code)
	{
		this.SaveAssignLogic = code;
		return this;
	}
	
	public DataInfo SaveElementAssign(string code)
	{
		string dataVar = this.LowerName + "Data";
			
			this.SaveAssignInit = new string[] { 
				"var " + dataVar + " = new IkonArray();",
				"foreach(var item in this." + this.Name + ")",
				"	" + dataVar + ".Add(" + code + ");"
			};
			this.SaveAssignLogic = dataVar;
		return this;
	}

	public DataInfo SaveIdCode()
	{
		this.SaveAssignLogic = "new IkonText(this." + this.Name + ".IdCode)";
		return this;
	}

	public DataInfo SaveKey(string keyName)
	{
		this.SavingKeyName = keyName + "Key";
		this.SavingKeyValue = keyName.ToLower();
		return this;
	}

	public DataInfo SaveKeyValue(string keyValue)
	{
		this.SavingKeyValue = keyValue;
		return this;
	}
	
	public DataInfo SaveMethod(string methodCall)
	{
		if (this.type.EndsWith("Collection"))
		{
			string dataVar = this.LowerName + "Data";
			
			this.SavingKeyName = "Collection";
			this.SaveAssignInit = new string[] { 
				"var " + dataVar + " = new IkonArray();",
				"foreach(var item in this." + this.Name + ")",
				"	" + dataVar + ".Add(item." + methodCall + ");"
			};
			this.SaveAssignLogic = dataVar;
		}
		else
			this.SaveAssignLogic = "this." + this.Name + "." + methodCall;
		return this;
	}
	
	public DataInfo SaveMethod(string methodCall, string nullAssigment)
	{
		this.SaveAssignLogic = "this." + this.Name +" != null ? " + "this." + this.Name + "." + methodCall + " : " + nullAssigment;
		return this;
	}
	
	public DataInfo SaveMethodWrap(string methodCall, string wrapperCode)
	{
		this.SaveAssignLogic = wrapperCode.Replace(Placeholder, "this." + this.Name + "." + methodCall);
		return this;
	}
	
	public DataInfo SaveTag(string keyName)
	{
		this.SavingTagName = keyName + "Tag";
		this.SavingTagValue = keyName;
		return this;
	}
}

class FirstCase
{
	private string firstCase;
	private string otherCases;
	private bool first = true;
	
	public FirstCase(string firstCase, string otherCases)
	{
		this.firstCase = firstCase;
		this.otherCases = otherCases;
	}
	
	public string Get
	{
		get
		{
			string result = first ? firstCase : otherCases;
			first = false;
			
			return result;
		}
	}
}

class GenericParamInfo
{
	public string Type;
	public string InitLogic = null;	//null -> ???, Default -> default constructor
	
	public bool CopyMethodNeedGalaxyRemap = false;
	public bool CopyMethodNeedPlayersRemap = false;
	
	public string CopyFromRemap = null;	//null -> pass logic
	public string CopyLogic = null;	//null -> ??, Default -> default constructor, None -> none
	
	public string SaveAssignLogic = null;
	public string SavingKeyName = null;
	public string SavingKeyValue = null;
	
	public GenericParamInfo(string type) {
		this.Type = type;
		this.SavingKeyName = type + "Key";
		
		initRemapCode();
	}
	
	private void analyzeRemapNeeds(string code)
	{
		this.CopyMethodNeedGalaxyRemap = code.Contains("galaxyRemap");
		this.CopyMethodNeedPlayersRemap = code.Contains("playersRemap");
	}
	
	private void initRemapCode()
	{
		this.CopyFromRemap = 
			initGalaxyRemapCode(this.Type, Default, out CopyMethodNeedGalaxyRemap) ??
			initPlayerRemapCode(this.Type, Default, out CopyMethodNeedPlayersRemap);
	}
	
	public GenericParamInfo Init(string code)
	{
		this.InitLogic = code;
		return this;
	}
	
	public GenericParamInfo CopyMethod(string code)
	{
		this.CopyLogic = Default + "." + code;
		this.analyzeRemapNeeds(code);
		return this;
	}
	
	public GenericParamInfo FromIndexer()
	{
		this.SaveAssignLogic = "new IkonInteger(indexer.IndexOf(" + AssignCode + "))";
		return this;
	}
	
	public GenericParamInfo SaveKeyValue(string keyValue)
	{
		this.SavingKeyValue = keyValue;
		return this;
	}
	
	public GenericParamInfo SaveMethod(string methodCall)
	{
		this.SaveAssignLogic = AssignCode + "." + methodCall;
		return this;
	}
}
#>
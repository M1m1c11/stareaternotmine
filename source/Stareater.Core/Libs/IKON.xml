<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ikon</name>
    </assembly>
    <members>
        <member name="T:Ikon.Utilities.Indentation">
            <summary>
            Indentation helper.
            </summary>
        </member>
        <member name="M:Ikon.Utilities.Indentation.ToString">
            <summary>
            Gets indentation string.
            </summary>
            <returns>Indentation string.</returns>
        </member>
        <member name="M:Ikon.Utilities.Indentation.Increase">
            <summary>
            Increases indentation by one level.
            </summary>
        </member>
        <member name="M:Ikon.Utilities.Indentation.Decrease">
            <summary>
            Decreases indentation by one level.
            </summary>
        </member>
        <member name="T:Ikon.Parser">
            <summary>
            Basic parser for texts streams with IKON syntax.
            </summary>
        </member>
        <member name="M:Ikon.Parser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs parser without registerd value factories.
            </summary>
            <param name="reader">Input stream with IKON syntax</param>
        </member>
        <member name="M:Ikon.Parser.#ctor(System.IO.TextReader,System.Collections.Generic.IEnumerable{Ikon.IValueFactory})">
            <summary>
            Constructs parser and registers value factories to it.
            </summary>
            <param name="reader">Input stream with IKON syntax.</param>
            <param name="factories">Collection of value factories.</param>
        </member>
        <member name="M:Ikon.Parser.RegisterFactory(Ikon.IValueFactory)">
            <summary>
            Registers a value factory to the parser. If parser already
            has a factory with the same sign, it will be replaced.
            </summary>
            <param name="factory">A value factory.</param>
        </member>
        <member name="M:Ikon.Parser.ParseAll">
            <summary>
            Parses whole input stream.
            </summary>
            <returns>Queue of parsed IKON values.</returns>
        </member>
        <member name="M:Ikon.Parser.HasNext">
            <summary>
            Checks whether parser can read more IKON values from the input stream.
            </summary>
            <returns>True if it is possible.</returns>
        </member>
        <member name="M:Ikon.Parser.ParseNext">
            <summary>
            Parses and returns next IKON value from the input stream. 
            
            Throws System.IO.EndOfStreamException if end of
            the input stream is encountered while parsing.
            </summary>
            <returns>An IKON value</returns>
        </member>
        <member name="M:Ikon.Parser.GetNamedValue(System.String)">
            <summary>
            Returns the IKON value with specified reference name. 
            
            Throws System.Collections.Generic.KeyNotFoundException 
            if such value doesn't exist.
            </summary>
            <param name="name">Name of the value reference</param>
            <returns>Desired IKON value.</returns>
        </member>
        <member name="M:Ikon.Parser.TryParseNext">
            <summary>
            Trys to parse next IKON value from the input stream. 
            
            Throws System.FormatException if there is no value factory
            that can parse curren state of the input.
            </summary>
            <returns>Return an IKON value if there is one, null otherwise.</returns>
        </member>
        <member name="M:Ikon.Parser.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IO.TextReader and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ikon.Parser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Ikon.Parser.Factories">
            <summary>
            Collection on value factories.
            </summary>
        </member>
        <member name="P:Ikon.Parser.NamedValues">
            <summary>
            Collection of named objects.
            </summary>
        </member>
        <member name="P:Ikon.Parser.Reader">
            <summary>
            Input stream that is being parsed.
            </summary>
        </member>
        <member name="T:Ikon.Utilities.WhiteSpaceSkipResult">
            <summary>
            Describes whitespace skipping run.
            </summary>
        </member>
        <member name="F:Ikon.Utilities.WhiteSpaceSkipResult.EndOfStream">
            <summary>
            Skipping whitespaces encountered end of stream/input.
            </summary>
        </member>
        <member name="F:Ikon.Utilities.WhiteSpaceSkipResult.NonwhiteChar">
            <summary>
            Skipping whitespaces has found non-whitespace character.
            </summary>
        </member>
        <member name="T:Ikon.IValueFactory">
            <summary>
            Interface for IKON value factories usable by IKON parser.
            </summary>
        </member>
        <member name="M:Ikon.IValueFactory.Parse(Ikon.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:Ikon.IValueFactory.Sign">
            <summary>
            Character that identifies value parcable by factory.
            </summary>
        </member>
        <member name="T:Ikon.IkonWriter">
            <summary>
            Base class for IKON composers. Composers transform IKON values to
            a text.
            </summary>
        </member>
        <member name="M:Ikon.IkonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructs basic IKON composer.
            </summary>
            <param name="writer">Output stream.</param>
        </member>
        <member name="M:Ikon.IkonWriter.Write(System.String)">
            <summary>
            Appends a text to the current line. Text entered with this method
            is buffered and is not written immediately to the output stream.
            To finalize the buffered data (and write it to output stream) call
            either EndLine or WrtieLine.
            </summary>
            <param name="text">Raw text.</param>
        </member>
        <member name="M:Ikon.IkonWriter.WriteLine(System.String)">
            <summary>
            Appends a text to the current line and writes buffered line to the
            output stream.
            </summary>
            <param name="text">Raw text.</param>
        </member>
        <member name="M:Ikon.IkonWriter.WriteReferences(System.String[])">
            <summary>
            Writes reference names to the output stream.
            </summary>
            <param name="referenceNames">List of reference names.</param>
        </member>
        <member name="M:Ikon.IkonWriter.EndLine">
            <summary>
            Writes buffered line to the output stream.
            </summary>
        </member>
        <member name="P:Ikon.IkonWriter.Writer">
            <summary>
            Output stream where IKON values are being written.
            </summary>
        </member>
        <member name="P:Ikon.IkonWriter.Indentation">
            <summary>
            Indentation level.
            </summary>
        </member>
        <member name="P:Ikon.IkonWriter.Line">
            <summary>
            Temporary line contents.
            </summary>
        </member>
        <member name="T:Ikon.IkonReader">
            <summary>
            Helper class with utility methods for parsing and composing
            text streams with IKON syntax.
            </summary>
        </member>
        <member name="F:Ikon.IkonReader.EndOfStreamResult">
            <summary>
            Value that System.IO.TextReader read methods return when end of the stream is reached.
            </summary>
        </member>
        <member name="F:Ikon.IkonReader.ReferenceSign">
            <summary>
            Character that marks the beginning of the reference name.
            </summary>
        </member>
        <member name="M:Ikon.IkonReader.#ctor(System.IO.TextReader)">
            <summary>
            Wraps TextReader with IkonReader
            </summary>
            <param name="reader">Input stream</param>
        </member>
        <member name="M:Ikon.IkonReader.Peek">
            <summary>
            Gets next character in the input stream without moving to the next.
            </summary>
        </member>
        <member name="M:Ikon.IkonReader.Read">
            <summary>
            Reads next character from the input stream.
            </summary>
            <returns>Read character.</returns>
        </member>
        <member name="M:Ikon.IkonReader.SkipWhiteSpaces">
            <summary>
            Skips consequentive whitespace characters from the input stream. 
            </summary>
            <returns>Descrtipion of the skipping process.</returns>
        </member>
        <member name="M:Ikon.IkonReader.PeekNextNonwhite">
            <summary>
            Skips white space characters in the input stream and peeks the next character. 
            Throws System.FormatException if end of stream is reached before a non-white 
            character i found.
            </summary>
            <returns>A non-white character</returns>
        </member>
        <member name="M:Ikon.IkonReader.ReadIdentifier">
            <summary>
            Reads the input stream for an IKON identifier. Throws System.FormatException if there is
            no valid identifier.
            </summary>
            <returns>An identifier name</returns>
        </member>
        <member name="M:Ikon.IkonReader.ReadReferences">
            <summary>
            Returns all consequentive reference names from the current state of the input stream.
            </summary>
            <returns>Reference names.</returns>
        </member>
        <member name="M:Ikon.IkonReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IO.TextReader and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ikon.IkonReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Ikon.IkonReader.HasNext">
            <summary>
            Indicates whether is it possible to read another character from the
            input stream.
            </summary>
        </member>
        <member name="T:Ikon.Value">
            <summary>
            Base class for IKON values.
            </summary>
        </member>
        <member name="M:Ikon.Value.DoCompose(Ikon.IkonWriter)">
            <summary>
            Writes value's content to the output stream.
            </summary>
            <param name="writer">Wrapped around target output stream.</param>
        </member>
        <member name="M:Ikon.Value.Compose(Ikon.IkonWriter,System.String[])">
            <summary>
            Writes an IKON value to the output stream.
            </summary>
            <param name="writer">Wrapped around target output stream.</param>
            <param name="referenceNames">List of reference names.</param>
        </member>
        <member name="P:Ikon.Value.TypeName">
            <summary>
            Type name of the IKON value instance.
            </summary>
        </member>
    </members>
</doc>

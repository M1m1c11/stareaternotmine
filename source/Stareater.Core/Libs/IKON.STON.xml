<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IKON.STON</name>
    </assembly>
    <members>
        <member name="T:IKON.STON.Factories.ReferencedFactory">
            <summary>
            IKON value factory for named value references.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.ReferencedFactory.OpeningSign">
            <summary>
            Sign for IKON value reference.
            </summary>
        </member>
        <member name="M:IKON.STON.Factories.ReferencedFactory.Parse(IKON.Parser)">
            <summary>
            Parses input for a IKSTON reference name.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>Referenced IKON value.</returns>
        </member>
        <member name="P:IKON.STON.Factories.ReferencedFactory.Sign">
            <summary>
            Sign for IKON value reference.
            </summary>
        </member>
        <member name="T:IKON.STON.Values.Object">
            <summary>
            IKSTON composite value with key-value pairs of nested IKON values.
            </summary>
        </member>
        <member name="F:IKON.STON.Values.Object.className">
            <summary>
            The name of the data class contained in this instance
            </summary>
        </member>
        <member name="F:IKON.STON.Values.Object.members">
            <summary>
            Collection of the nested IKON values.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Object.#ctor(System.String)">
            <summary>
            Constructs IKSTON composite value marked as specified class of data.
            </summary>
            <param name="className">Name of the data class.</param>
        </member>
        <member name="M:IKON.STON.Values.Object.Add(System.String,IKON.Value)">
            <summary>
            Builder method fo adding an element to IKSTON object.
            </summary>
            <param name="key">Key of the value.</param>
            <param name="value">Element's value.</param>
            <returns>Instance of the same IKSTON object method is called for.</returns>
        </member>
        <member name="M:IKON.STON.Values.Object.Compose(IKON.Composer)">
            <summary>
            Writes an IKSTON composite value to the composer.
            </summary>
            <param name="composer">Target composer.</param>
        </member>
        <member name="P:IKON.STON.Values.Object.Item(System.String)">
            <summary>
            Gets or sets nested IKON value.
            </summary>
            <param name="memberName">Key of the value</param>
            <returns>Nested IKON value</returns>
        </member>
        <member name="P:IKON.STON.Values.Object.Keys">
            <summary>
            Gets the collection of keys of the nested IKON values.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Object.TypeName">
            <summary>
            Gets the name of the data class contained in this instance.
            </summary>
        </member>
        <member name="T:IKON.STON.Factories.NumericFactory">
            <summary>
            IKON value factory for IKSTON  numeric values.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.NumericFactory.OpeningSign">
            <summary>
            Sign for IKON numeric value.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.NumericFactory.NumberFormat">
            <summary>
            Number format used for IKSTON numeric values.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.NumericFactory.NumberStlye">
            <summary>
            Valid styles for IKSTON numeric values.
            </summary>
        </member>
        <member name="M:IKON.STON.Factories.NumericFactory.Parse(IKON.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:IKON.STON.Factories.NumericFactory.Sign">
            <summary>
            Sign for IKON numeric value.
            </summary>
        </member>
        <member name="T:IKON.STON.Factories.ObjectFactory">
            <summary>
            IKON value factory for composite IKSTON values.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.ObjectFactory.OpeningSign">
            <summary>
            Sign for IKON composite value.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.ObjectFactory.ClosingChar">
            <summary>
            Closing character for IKSTON composite value in textual
            representation.
            </summary>
        </member>
        <member name="M:IKON.STON.Factories.ObjectFactory.Parse(IKON.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:IKON.STON.Factories.ObjectFactory.Sign">
            <summary>
            Sign for IKON composite value.
            </summary>
        </member>
        <member name="T:IKON.STON.Values.Array">
            <summary>
            Array of IKON values.
            </summary>
        </member>
        <member name="F:IKON.STON.Values.Array.ValueTypeName">
            <summary>
            Type name of IKSTON arrays.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Array.#ctor(System.Collections.Generic.IList{IKON.Value})">
            <summary>
            Constructs IKSTON array of IKON values
            </summary>
            <param name="values">Initial array contents.</param>
        </member>
        <member name="M:IKON.STON.Values.Array.Add(IKON.Value[])">
            <summary>
            Builder method fo adding one or more elements to IKSTON array.
            </summary>
            <param name="values">Elements to be added.</param>
            <returns>Instance of the same IKSTON array method is called for.</returns>
        </member>
        <member name="M:IKON.STON.Values.Array.Compose(IKON.Composer)">
            <summary>
            Writes an IKSTON array to the composer.
            </summary>
            <param name="composer">Target composer.</param>
        </member>
        <member name="P:IKON.STON.Values.Array.TypeName">
            <summary>
            Type name of the IKON value instance.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Array.GetList">
            <summary>
            Gets the array of IKON values.
            </summary>
        </member>
        <member name="T:IKON.STON.Values.Numeric">
            <summary>
            IKSTON numeric value.
            </summary>
        </member>
        <member name="F:IKON.STON.Values.Numeric.ValueTypeName">
            <summary>
            Type name of IKSTON numeric values.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.String)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="texutalRepresentation">Textual representation of the value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.Decimal)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.Double)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.Single)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.Int64)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.Int32)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.#ctor(System.Int16)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:IKON.STON.Values.Numeric.op_Implicit(IKON.STON.Values.Numeric)~System.Decimal">
            <summary>
            Implicit conversion from IKSTON numeric value to System.Decimal value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.op_Implicit(IKON.STON.Values.Numeric)~System.Double">
            <summary>
            Implicit conversion from IKSTON numeric value to System.Double value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.op_Implicit(IKON.STON.Values.Numeric)~System.Single">
            <summary>
            Implicit conversion from IKSTON numeric value to System.Single value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.op_Implicit(IKON.STON.Values.Numeric)~System.Int32">
            <summary>
            Implicit conversion from IKSTON numeric value to System.Int32 value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.op_Implicit(IKON.STON.Values.Numeric)~System.Int64">
            <summary>
            Implicit conversion from IKSTON numeric value to System.Int64 value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.op_Implicit(IKON.STON.Values.Numeric)~System.Int16">
            <summary>
            Implicit conversion from IKSTON numeric value to System.Int16 value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Numeric.Compose(IKON.Composer)">
            <summary>
            Writes an IKSTON numeric value to the composer.
            </summary>
            <param name="composer">Target composer.</param>
        </member>
        <member name="P:IKON.STON.Values.Numeric.TypeName">
            <summary>
            Type name of the IKSTON numeric value instance.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.GetDecimal">
            <summary>
            Gets System.Decimal value from IKON numeric value.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.GetDouble">
            <summary>
            Gets System.Double value from IKON numeric value.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.GetFloat">
            <summary>
            Gets System.Single value from IKON numeric value.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.GetInt">
            <summary>
            Gets System.Int32 value from IKON numeric value.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.GetLong">
            <summary>
            Gets System.Int64 value from IKON numeric value.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.GetShort">
            <summary>
            Gets System.Int16 value from IKON numeric value.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Numeric.InvariantString">
            <summary>
            Gets textual representation of contained numeric value.
            </summary>
        </member>
        <member name="T:IKON.STON.Values.Text">
            <summary>
            IKSTON textual value.
            </summary>
        </member>
        <member name="F:IKON.STON.Values.Text.ValueTypeName">
            <summary>
            Type name of IKSTON text values.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Text.#ctor(System.String)">
            <summary>
            Constructs IKSTON textual value with specified contents.
            </summary>
            <param name="value">Contents</param>
        </member>
        <member name="M:IKON.STON.Values.Text.op_Implicit(IKON.STON.Values.Text)~System.String">
            <summary>
            Implicit conversion from IKON textual value to System.String value.
            </summary>
        </member>
        <member name="M:IKON.STON.Values.Text.Compose(IKON.Composer)">
            <summary>
            Writes an IKSTON text value to the composer.
            </summary>
            <param name="composer">Target composer.</param>
        </member>
        <member name="P:IKON.STON.Values.Text.TypeName">
            <summary>
            Type name of the IKON value instance.
            </summary>
        </member>
        <member name="P:IKON.STON.Values.Text.GetText">
            <summary>
            Gets System.String value from IKSTON textual value.
            </summary>
        </member>
        <member name="T:IKON.STON.Parser">
            <summary>
            Parser that can parse input with IKSTON syntax.
            </summary>
        </member>
        <member name="M:IKON.STON.Parser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs IKSTON parser with default IKSTON value factories.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:IKON.STON.Parser.#ctor(System.IO.TextReader,System.Collections.Generic.IEnumerable{IKON.IValueFactory})">
            <summary>
            Constructs IKSTON parser and registers addoditonal value factories to it.
            </summary>
            <param name="reader">Input stream with IKON syntax.</param>
            <param name="factories">Collection of value factories.</param>
        </member>
        <member name="T:IKON.STON.Factories.TextFactory">
            <summary>
            IKON value factory for IKSTON  textual values.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.TextFactory.OpeningSign">
            <summary>
            Sign for IKON textual value.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.TextFactory.ClosingChar">
            <summary>
            Closing character for IKSTON textual value in textual
            representation.
            </summary>
        </member>
        <member name="M:IKON.STON.Factories.TextFactory.Parse(IKON.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:IKON.STON.Factories.TextFactory.Sign">
            <summary>
            Sign for IKON textual value.
            </summary>
        </member>
        <member name="T:IKON.STON.Factories.ArrayFactory">
            <summary>
            IKON value factory for IKSTON  array.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.ArrayFactory.OpeningSign">
            <summary>
            Sign for IKON array.
            </summary>
        </member>
        <member name="F:IKON.STON.Factories.ArrayFactory.ClosingChar">
            <summary>
            Closing character for IKSTON array in textual
            representation.
            </summary>
        </member>
        <member name="M:IKON.STON.Factories.ArrayFactory.Parse(IKON.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:IKON.STON.Factories.ArrayFactory.Sign">
            <summary>
            Sign for IKON array.
            </summary>
        </member>
        <member name="T:IKON.STON.Extensions">
            <summary>
            Various extension methods that adds IKSTON specific functionality to IKON classes.
            </summary>
        </member>
        <member name="M:IKON.STON.Extensions.AsArray(IKON.Value)">
            <summary>
            Casts base IKON value to IKSTON array
            </summary>
            <param name="value"></param>
            <returns>IKSTON array</returns>
        </member>
        <member name="M:IKON.STON.Extensions.AsNumber(IKON.Value)">
            <summary>
            Casts base IKON value to IKSTON number
            </summary>
            <param name="value"></param>
            <returns>IKSTON number</returns>
        </member>
        <member name="M:IKON.STON.Extensions.AsObject(IKON.Value)">
            <summary>
            Casts base IKON value to IKSTON object (composite value)
            </summary>
            <param name="value"></param>
            <returns>IKSTON object</returns>
        </member>
        <member name="M:IKON.STON.Extensions.AsText(IKON.Value)">
            <summary>
            Casts base IKON value to IKSTON text
            </summary>
            <param name="value"></param>
            <returns>IKSTON text</returns>
        </member>
    </members>
</doc>

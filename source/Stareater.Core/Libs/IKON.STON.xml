<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ikon.Ston</name>
    </assembly>
    <members>
        <member name="T:Ikon.Ston.Factories.TextFactory">
            <summary>
            IKON value factory for IKSTON  textual values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.TextFactory.OpeningSign">
            <summary>
            Sign for IKON textual value.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.TextFactory.ClosingChar">
            <summary>
            Closing character for IKSTON textual value in textual
            representation.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Factories.TextFactory.Parse(Ikon.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:Ikon.Ston.Factories.TextFactory.Sign">
            <summary>
            Sign for IKON textual value.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Values.ReferenceValue">
            <summary>
            IKSTON reference value.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Values.IkstonBaseValue">
            <summary>
            Base class for IKSTON values. Add reference names on top the IKON values.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.IkstonBaseValue.WriteReferences(Ikon.IkonWriter)">
            <summary>
            Writes value's reference names (if any) to the output stream.
            </summary>
            <param name="writer">Wrapped around target output stream.</param>
        </member>
        <member name="P:Ikon.Ston.Values.IkstonBaseValue.ReferenceNames">
            <summary>
            Set of objects that can be used as reference to the value.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.ReferenceValue.ValueTypeName">
            <summary>
            Type name of IKSTON text values.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.ReferenceValue.#ctor(System.String)">
            <summary>
            Constructs IKSTON reference value with specified name.
            </summary>
            <param name="name">Name of the referenced object.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ReferenceValue.To``1">
            <summary>
            Converts IKSTON reference value to specified type. Supported target types:
            
            System.string
            Ikon.Ston.Values.TextValue
            </summary>
            <typeparam name="T">Target type</typeparam>
            <returns>Converted value</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ReferenceValue.DoCompose(Ikon.IkonWriter)">
            <summary>
            Writes an IKSTON reference value to the composer.
            </summary>
            <param name="writer">Target composer.</param>
        </member>
        <member name="P:Ikon.Ston.Values.ReferenceValue.TypeName">
            <summary>
            Type name of the IKON value instance.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Factories.ArrayFactory">
            <summary>
            IKON value factory for IKSTON  array.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.ArrayFactory.OpeningSign">
            <summary>
            Sign for IKON array.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.ArrayFactory.ClosingChar">
            <summary>
            Closing character for IKSTON array in textual
            representation.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Factories.ArrayFactory.Parse(Ikon.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:Ikon.Ston.Factories.ArrayFactory.Sign">
            <summary>
            Sign for IKON array.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Factories.ReferencedFactory">
            <summary>
            IKON value factory for named value references.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.ReferencedFactory.OpeningSign">
            <summary>
            Sign for IKON value reference.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Factories.ReferencedFactory.Parse(Ikon.Parser)">
            <summary>
            Parses input for a IKSTON reference name.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>Referenced IKON value.</returns>
        </member>
        <member name="P:Ikon.Ston.Factories.ReferencedFactory.Sign">
            <summary>
            Sign for IKON value reference.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Factories.ObjectFactory">
            <summary>
            IKON value factory for composite IKSTON values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.ObjectFactory.OpeningSign">
            <summary>
            Sign for IKON composite value.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.ObjectFactory.ClosingChar">
            <summary>
            Closing character for IKSTON composite value in textual
            representation.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Factories.ObjectFactory.Parse(Ikon.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:Ikon.Ston.Factories.ObjectFactory.Sign">
            <summary>
            Sign for IKON composite value.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Values.ArrayValue">
            <summary>
            Array of IKON values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.ArrayValue.ValueTypeName">
            <summary>
            Type name of IKSTON arrays.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.#ctor(System.Collections.Generic.IList{Ikon.IkonBaseValue})">
            <summary>
            Constructs IKSTON array of IKON values
            </summary>
            <param name="values">Initial array contents.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.#ctor">
            <summary>
            Constructs IKSTON array
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.To``1">
            <summary>
            Converts IKSTON array value to specified type. Supported target types:
            
            System.Collections.Generic.IList&lt;Value&gt;
            Ikon.Ston.Values.ArrayValue
            </summary>
            <typeparam name="T">Target type</typeparam>
            <returns>Converted value</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.Add(Ikon.IkonBaseValue[])">
            <summary>
            Builder method fo adding one or more elements to IKSTON array.
            </summary>
            <param name="values">Elements to be added.</param>
            <returns>Instance of the same IKSTON array method is called for.</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.DoCompose(Ikon.IkonWriter)">
            <summary>
            Writes an IKSTON array to the composer.
            </summary>
            <param name="writer">Target composer.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.IndexOf(Ikon.IkonBaseValue)">
            <summary>
            Determines the index of a specific item in the System.Collections.Generic.IList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.IList&lt;T&gt;.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.Insert(System.Int32,Ikon.IkonBaseValue)">
            <summary>
            Inserts an item to the System.Collections.Generic.IList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the System.Collections.Generic.IList&lt;T&gt;.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.RemoveAt(System.Int32)">
            <summary>
            Removes the System.Collections.Generic.IList&lt;T&gt; item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.Add(Ikon.IkonBaseValue)">
            <summary>
            Adds an item to the System.Collections.Generic.ICollection&lt;T&gt;.
            </summary>
            <param name="item">The object to add to the System.Collections.Generic.ICollection&lt;T&gt;.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.Clear">
            <summary>
            Removes all items from the System.Collections.Generic.ICollection&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.Contains(Ikon.IkonBaseValue)">
            <summary>
            Determines whether the System.Collections.Generic.ICollection&lt;T&gt; contains a specific value.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.ICollection&lt;T&gt;.</param>
            <returns>true if item is found in the System.Collections.Generic.ICollection&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.CopyTo(Ikon.IkonBaseValue[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection&lt;T&gt; to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied
            from System.Collections.Generic.ICollection&lt;T&gt;. The System.Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.Remove(Ikon.IkonBaseValue)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the System.Collections.Generic.ICollection&lt;T&gt;.</param>
            <returns>true if item was successfully removed from the System.Collections.Generic.ICollection&lt;T&gt;; 
            otherwise, false. This method also returns false if item is not found in the original 
            System.Collections.Generic.ICollection&lt;T&gt;.
            </returns>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ikon.Ston.Values.ArrayValue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Ikon.Ston.Values.ArrayValue.TypeName">
            <summary>
            Type name of the IKON value instance.
            </summary>
        </member>
        <member name="P:Ikon.Ston.Values.ArrayValue.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Ikon.Ston.Values.ArrayValue.Count">
            <summary>
            Gets the number of elements contained in the System.Collections.Generic.ICollection&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Ikon.Ston.Values.ArrayValue.IsReadOnly">
            <summary>
            Gets a value indicating whether the System.Collections.Generic.ICollection&lt;T&gt; is read-only.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Values.ObjectValue">
            <summary>
            IKSTON composite value with key-value pairs of nested IKON values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.ObjectValue.className">
            <summary>
            The name of the data class contained in this instance
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.ObjectValue.members">
            <summary>
            Collection of the nested IKON values.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.ObjectValue.#ctor(System.String)">
            <summary>
            Constructs IKSTON composite value marked as specified class of data.
            </summary>
            <param name="className">Name of the data class.</param>
        </member>
        <member name="M:Ikon.Ston.Values.ObjectValue.To``1">
            <summary>
            Converts IKSTON object value to specified type. Supported target types:
            
            Ikon.Ston.Values.ObjectValue
            </summary>
            <typeparam name="T">Target type</typeparam>
            <returns>Converted value</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ObjectValue.Add(System.String,Ikon.IkonBaseValue)">
            <summary>
            Builder method for adding an element to IKSTON object.
            </summary>
            <param name="key">Key of the value.</param>
            <param name="value">Element's value.</param>
            <returns>Instance of the same IKSTON object method is called for.</returns>
        </member>
        <member name="M:Ikon.Ston.Values.ObjectValue.DoCompose(Ikon.IkonWriter)">
            <summary>
            Writes an IKSTON composite value to the composer.
            </summary>
            <param name="writer">Target composer.</param>
        </member>
        <member name="P:Ikon.Ston.Values.ObjectValue.Item(System.String)">
            <summary>
            Gets or sets nested IKON value.
            </summary>
            <param name="memberName">Key of the value</param>
            <returns>Nested IKON value</returns>
        </member>
        <member name="P:Ikon.Ston.Values.ObjectValue.Keys">
            <summary>
            Gets the collection of keys of the nested IKON values.
            </summary>
        </member>
        <member name="P:Ikon.Ston.Values.ObjectValue.TypeName">
            <summary>
            Gets the name of the data class contained in this instance.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Values.NumericValue">
            <summary>
            IKSTON numeric value.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.NumericValue.ValueTypeName">
            <summary>
            Type name of IKSTON numeric values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.NumericValue.PositiveInfinity">
            <summary>
            Textual representation of IKSTON numeric for positive infinity.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.NumericValue.NegativeInfinity">
            <summary>
            Textual representation of IKSTON numeric for negative infinity.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.NumericValue.NotANumber">
            <summary>
            Textual representation of IKSTON numeric for not a number.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.String)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="textualRepresentation">Textual representation of the value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.Decimal)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.Double)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.Single)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.Int64)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.Int32)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.#ctor(System.Int16)">
            <summary>
            Constructs IKSTON numeric value.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.To``1">
            <summary>
            Converts IKSTON numeric value to specified type. Supported target types:
            
            System.decimal
            System.double
            System.float
            System.int
            System.long
            System.short
            Ikon.Ston.Values.NumericValue
            </summary>
            <typeparam name="T">Target type</typeparam>
            <returns>Converted value</returns>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.GetDecimal(System.String)">
            <summary>
            Gets System.Decimal value from IKON numeric value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.GetDouble(System.String)">
            <summary>
            Gets System.Double value from IKON numeric value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.GetFloat(System.String)">
            <summary>
            Gets System.Single value from IKON numeric value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.GetInt(System.String)">
            <summary>
            Gets System.Int32 value from IKON numeric value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.GetLong(System.String)">
            <summary>
            Gets System.Int64 value from IKON numeric value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.GetShort(System.String)">
            <summary>
            Gets System.Int16 value from IKON numeric value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.NumericValue.DoCompose(Ikon.IkonWriter)">
            <summary>
            Writes an IKSTON numeric value to the composer.
            </summary>
            <param name="writer">Target composer.</param>
        </member>
        <member name="P:Ikon.Ston.Values.NumericValue.TypeName">
            <summary>
            Type name of the IKSTON numeric value instance.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Values.TextValue">
            <summary>
            IKSTON textual value.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Values.TextValue.ValueTypeName">
            <summary>
            Type name of IKSTON text values.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.TextValue.#ctor(System.String)">
            <summary>
            Constructs IKSTON textual value with specified contents.
            </summary>
            <param name="value">Contents</param>
        </member>
        <member name="M:Ikon.Ston.Values.TextValue.To``1">
            <summary>
            Converts IKSTON text value to specified type. Supported target types:
            
            System.string
            Ikon.Ston.Values.TextValue
            </summary>
            <typeparam name="T">Target type</typeparam>
            <returns>Converted value</returns>
        </member>
        <member name="M:Ikon.Ston.Values.TextValue.op_Implicit(Ikon.Ston.Values.TextValue)~System.String">
            <summary>
            Implicit conversion from IKON textual value to System.String value.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Values.TextValue.DoCompose(Ikon.IkonWriter)">
            <summary>
            Writes an IKSTON text value to the composer.
            </summary>
            <param name="writer">Target composer.</param>
        </member>
        <member name="P:Ikon.Ston.Values.TextValue.TypeName">
            <summary>
            Type name of the IKON value instance.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Factories.NumericFactory">
            <summary>
            IKON value factory for IKSTON  numeric values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.NumericFactory.OpeningSign">
            <summary>
            Sign for IKON numeric value.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.NumericFactory.NumberFormat">
            <summary>
            Number format used for IKSTON numeric values.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Factories.NumericFactory.NumberStyle">
            <summary>
            Valid styles for IKSTON numeric values.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Factories.NumericFactory.Parse(Ikon.Parser)">
            <summary>
            Parses input for a IKON value.
            </summary>
            <param name="parser">IKON parser instance.</param>
            <returns>IKON value generated by factory.</returns>
        </member>
        <member name="P:Ikon.Ston.Factories.NumericFactory.Sign">
            <summary>
            Sign for IKON numeric value.
            </summary>
        </member>
        <member name="T:Ikon.Ston.Parser">
            <summary>
            Parser that can parse input with IKSTON syntax.
            </summary>
        </member>
        <member name="F:Ikon.Ston.Parser.ReferenceSign">
            <summary>
            Character that marks the beginning of the reference name.
            </summary>
        </member>
        <member name="M:Ikon.Ston.Parser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs IKSTON parser with default IKSTON value factories.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ikon.Ston.Parser.#ctor(System.IO.TextReader,System.Collections.Generic.IEnumerable{Ikon.IValueFactory})">
            <summary>
            Constructs IKSTON parser and registers addoditonal value factories to it.
            </summary>
            <param name="reader">Input stream with IKON syntax.</param>
            <param name="factories">Collection of value factories.</param>
        </member>
        <member name="M:Ikon.Ston.Parser.TryParseNext">
            <summary>
            Trys to parse next IKON value from the input stream. 
            
            Throws System.FormatException if there is no value factory
            that can parse curren state of the input.
            </summary>
            <returns>Return an IKON value if there is one, null otherwise.</returns>
        </member>
        <member name="M:Ikon.Ston.Parser.GetNamedValue(System.String)">
            <summary>
            Returns the IKON value with specified reference name. 
            
            Throws System.Collections.Generic.KeyNotFoundException 
            if such value doesn't exist.
            </summary>
            <param name="name">Name of the value reference</param>
            <returns>Desired IKON value.</returns>
        </member>
        <member name="M:Ikon.Ston.Parser.ReadIdentifier(Ikon.IkonReader)">
            <summary>
            Reads the input stream for an IKON identifier. Throws System.FormatException if there is
            no valid identifier.
            </summary>
            <returns>An identifier name</returns>
        </member>
        <member name="P:Ikon.Ston.Parser.NamedValues">
            <summary>
            Collection of named objects.
            </summary>
        </member>
    </members>
</doc>
